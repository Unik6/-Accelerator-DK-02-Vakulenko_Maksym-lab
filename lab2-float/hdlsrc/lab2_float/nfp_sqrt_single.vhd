-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\lab2_float\nfp_sqrt_single.vhd
-- Created: 2023-01-11 20:53:44
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: nfp_sqrt_single
-- Source Path: lab2_float/CALC_MAG_AND_PHASE_FLoat_POIN/nfp_sqrt_single
-- Hierarchy Level: 1
-- 
-- {Latency Strategy = "Max", Denormal Handling = "off"}
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.CALC_MAG_AND_PHASE_FLoat_POIN_pkg.ALL;

ENTITY nfp_sqrt_single IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        nfp_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        nfp_out                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
        );
END nfp_sqrt_single;


ARCHITECTURE rtl OF nfp_sqrt_single IS

  -- Signals
  SIGNAL nfp_in_unsigned                  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL aSign                            : std_logic;  -- ufix1
  SIGNAL aExponent                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL aMantissa                        : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Delay5_out1                      : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL aMantissa_0_out1                 : std_logic;  -- ufix1
  SIGNAL Delay4_out1                      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL aSign_1_out1                     : std_logic;  -- ufix1
  SIGNAL alphaaSign_0_aExponent_1_out1    : std_logic;  -- ufix1
  SIGNAL Delay3_out1                      : std_logic;  -- ufix1
  SIGNAL C2_out1                          : std_logic;  -- ufix1
  SIGNAL if_aSign_0_aExponent_2_out1      : std_logic;  -- ufix1
  SIGNAL Delay2_reg                       : std_logic_vector(0 TO 26);  -- ufix1 [27]
  SIGNAL Delay2_reg_next                  : std_logic_vector(0 TO 26);  -- ufix1 [27]
  SIGNAL Delay2_out1                      : std_logic;  -- ufix1
  SIGNAL Constant8_out1                   : std_logic;  -- ufix1
  SIGNAL Constant7_out1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Relational_Operator_relop1       : std_logic;
  SIGNAL Delay4_out1_1                    : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1           : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1            : std_logic;  -- ufix1
  SIGNAL Add_out1                         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay3_out1_1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Add_add_cast                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant1_out1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL aSign_1_out1_1                   : std_logic;  -- ufix1
  SIGNAL aExponent_cfType_Exponent_I_out1 : std_logic;  -- ufix1
  SIGNAL alphaaSign_1_aExponent_out1      : std_logic;  -- ufix1
  SIGNAL Delay6_reg                       : std_logic_vector(0 TO 25);  -- ufix1 [26]
  SIGNAL Delay6_reg_next                  : std_logic_vector(0 TO 25);  -- ufix1 [26]
  SIGNAL Delay6_out1                      : std_logic;  -- ufix1
  SIGNAL aExponent_0_out1                 : std_logic;  -- ufix1
  SIGNAL aMantissa_0_out1_1               : std_logic;  -- ufix1
  SIGNAL Denormal_Support_out1            : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1           : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_1          : std_logic;  -- ufix1
  SIGNAL alphaaExponent_0_aMantissa_out1  : std_logic;  -- ufix1
  SIGNAL Delay7_reg                       : std_logic_vector(0 TO 25);  -- ufix1 [26]
  SIGNAL Delay7_reg_next                  : std_logic_vector(0 TO 25);  -- ufix1 [26]
  SIGNAL Delay7_out1                      : std_logic;  -- ufix1
  SIGNAL Exponent_0_out1                  : std_logic;  -- ufix1
  SIGNAL C_out1                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_Exponent_0_out1               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay3_out1_2                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL BitSlice_out1                    : std_logic;  -- ufix1
  SIGNAL alpha0_out1                      : std_logic;  -- ufix1
  SIGNAL Exponent_0_out1_1                : std_logic;  -- ufix1
  SIGNAL Exponent_cfType_Exponent_In_out1 : std_logic;  -- ufix1
  SIGNAL alphaExponent_0_Exponent_out1    : std_logic;  -- ufix1
  SIGNAL alpha1_out1                      : std_logic;  -- ufix1
  SIGNAL Bit_Concat1_out1                 : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL alpha0_out1_1                    : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1                  : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL if_Exponent_0_Exponent_out1      : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Delay2_out1_1                    : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Bit_Concat_out1_1                : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL alpha1_out1_1                    : std_logic;  -- ufix1
  SIGNAL Bit_Concat1_out1_1               : unsigned(25 DOWNTO 0);  -- ufix26
  SIGNAL Bit_Shift_out1                   : unsigned(25 DOWNTO 0);  -- ufix26
  SIGNAL if_bitget_exp_a_norm_1_out1      : unsigned(25 DOWNTO 0);  -- ufix26
  SIGNAL Bit_Slice_out1                   : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL alpha2_out1                      : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Constant_out1                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Add_sub_cast                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_sub_cast_1                   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_sub_temp                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_out1_1                       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Bit_Concat2_out1                 : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Slice1_out1                  : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Bit_Concat3_out1                 : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL Data_Type_Conversion_out1        : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay_out1                       : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay29_PS4_out1                 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL bitsll_R_1_out1                  : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_1                : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Data_Type_Conversion1_out1       : signed(4 DOWNTO 0);  -- sfix5
  SIGNAL alpha41943040_out1               : signed(4 DOWNTO 0);  -- sfix5
  SIGNAL R_41943040_sub_temp              : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL R_41943040_out1                  : signed(4 DOWNTO 0);  -- sfix5
  SIGNAL Bit_Slice_out1_1                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_2          : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1                  : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Bit_Concat_out1_2                : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL Data_Type_Conversion_out1_1      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_tmp3_0_1_out1                 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL bitsll_R_1_out1_1                : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_2                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Data_Type_Conversion1_out1_1     : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL alpha16777216_out1               : signed(4 DOWNTO 0);  -- sfix5
  SIGNAL C_out1_1                         : signed(4 DOWNTO 0);  -- sfix5
  SIGNAL if_tmp3_0_out1                   : signed(4 DOWNTO 0);  -- sfix5
  SIGNAL Constant_out1_1                  : std_logic;  -- ufix1
  SIGNAL Bit_Concat1_out1_2               : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Data_Type_Conversion2_out1       : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL bitsll_Q_1_out1                  : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL BitSet_out1                      : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL R_tmp2_sub_temp                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL R_tmp2_out1                      : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Bit_Slice_out1_2                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_3          : std_logic;
  SIGNAL if_tmp3_0_1_out1_1               : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Bit_Slice2_out1_1                : unsigned(21 DOWNTO 0);  -- ufix22
  SIGNAL Bit_Concat_out1_3                : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL Data_Type_Conversion_out1_2      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay3_PS5_out1                  : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL bitsll_R_1_out1_2                : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_3                : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Data_Type_Conversion1_out1_2     : signed(6 DOWNTO 0);  -- sfix7
  SIGNAL BitSet1_out1                     : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL if_tmp3_0_out1_1                 : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Delay2_PS5_out1                  : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Constant_out1_2                  : std_logic;  -- ufix1
  SIGNAL Bit_Concat1_out1_3               : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Data_Type_Conversion2_out1_1     : signed(6 DOWNTO 0);  -- sfix7
  SIGNAL bitsll_Q_1_out1_1                : signed(6 DOWNTO 0);  -- sfix7
  SIGNAL BitSet_out1_1                    : signed(6 DOWNTO 0);  -- sfix7
  SIGNAL R_tmp2_sub_temp_1                : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL R_tmp2_out1_1                    : signed(6 DOWNTO 0);  -- sfix7
  SIGNAL Bit_Slice_out1_3                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_4          : std_logic;
  SIGNAL if_tmp3_0_1_out1_2               : signed(6 DOWNTO 0);  -- sfix7
  SIGNAL Bit_Slice2_out1_2                : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL Bit_Concat_out1_4                : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL Data_Type_Conversion_out1_3      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL bitsll_R_1_out1_3                : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_4                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Data_Type_Conversion1_out1_3     : signed(7 DOWNTO 0);  -- int8
  SIGNAL BitSet1_out1_1                   : signed(6 DOWNTO 0);  -- sfix7
  SIGNAL if_tmp3_0_out1_2                 : signed(6 DOWNTO 0);  -- sfix7
  SIGNAL Constant_out1_3                  : std_logic;  -- ufix1
  SIGNAL Bit_Concat1_out1_4               : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Data_Type_Conversion2_out1_2     : signed(7 DOWNTO 0);  -- int8
  SIGNAL bitsll_Q_1_out1_2                : signed(7 DOWNTO 0);  -- int8
  SIGNAL BitSet_out1_2                    : signed(7 DOWNTO 0);  -- int8
  SIGNAL R_tmp2_out1_2                    : signed(7 DOWNTO 0);  -- int8
  SIGNAL Bit_Slice_out1_4                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_5          : std_logic;
  SIGNAL if_tmp3_0_1_out1_3               : signed(7 DOWNTO 0);  -- int8
  SIGNAL Bit_Slice2_out1_3                : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL Bit_Concat_out1_5                : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL Data_Type_Conversion_out1_4      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay5_PS6_out1                  : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL bitsll_R_1_out1_4                : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_5                : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Data_Type_Conversion1_out1_4     : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL BitSet1_out1_2                   : signed(7 DOWNTO 0);  -- int8
  SIGNAL if_tmp3_0_out1_3                 : signed(7 DOWNTO 0);  -- int8
  SIGNAL Delay4_PS6_out1                  : signed(7 DOWNTO 0);  -- int8
  SIGNAL Constant_out1_4                  : std_logic;  -- ufix1
  SIGNAL Bit_Concat1_out1_5               : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Data_Type_Conversion3_out1       : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL bitsll_Q_1_1_out1                : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL BitSet2_out1                     : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL R_tmp2_sub_temp_2                : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL R_tmp2_out1_3                    : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Bit_Slice_out1_5                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_6          : std_logic;
  SIGNAL if_tmp3_0_1_out1_4               : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Bit_Slice2_out1_4                : unsigned(18 DOWNTO 0);  -- ufix19
  SIGNAL Bit_Concat_out1_6                : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL Data_Type_Conversion_out1_5      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay10_PS7_out1                 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL bitsll_R_1_out1_5                : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Split_Remainder_accordingly_out1 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Data_Type_Conversion1_out1_5     : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL BitSet1_out1_3                   : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL if_tmp3_0_out1_4                 : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Delay11_PS7_out1                 : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Constant_out1_5                  : std_logic;  -- ufix1
  SIGNAL Build_Quotient_bit_by_bit_out1   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Data_Type_Conversion3_out1_1     : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL bitsll_Q_1_1_out1_1              : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL BitSet2_out1_1                   : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL R_tmp2_sub_temp_3                : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL R_tmp2_out1_4                    : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Bit_Slice_out1_6                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_7          : std_logic;
  SIGNAL if_tmp3_0_1_out1_5               : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Bit_Slice2_out1_5                : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL Bit_Concat_out1_7                : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL Data_Type_Conversion_out1_6      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay5_PS8_out1                  : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL bitsll_R_1_out1_6                : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_6                : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Data_Type_Conversion1_out1_6     : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL BitSet1_out1_4                   : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL if_tmp3_0_out1_5                 : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Delay4_PS8_out1                  : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Constant_out1_6                  : std_logic;  -- ufix1
  SIGNAL Bit_Concat1_out1_6               : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Data_Type_Conversion3_out1_2     : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL bitsll_Q_1_1_out1_2              : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL BitSet2_out1_2                   : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL R_tmp2_sub_temp_4                : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL R_tmp2_out1_5                    : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL Bit_Slice_out1_7                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_8          : std_logic;
  SIGNAL if_tmp3_0_1_out1_6               : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL Bit_Slice2_out1_6                : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL Bit_Concat_out1_8                : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL Data_Type_Conversion_out1_7      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay_PS9_out1                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL bitsll_R_1_out1_7                : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_7                : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Data_Type_Conversion1_out1_7     : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL BitSet1_out1_5                   : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL if_tmp3_0_out1_6                 : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL Delay1_PS9_out1                  : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL Constant_out1_7                  : std_logic;  -- ufix1
  SIGNAL Bit_Concat1_out1_7               : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Data_Type_Conversion3_out1_3     : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL bitsll_Q_1_1_out1_3              : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL BitSet2_out1_3                   : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL R_tmp2_sub_temp_5                : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL R_tmp2_out1_6                    : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Bit_Slice_out1_8                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_9          : std_logic;
  SIGNAL if_tmp3_0_1_out1_7               : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Bit_Slice2_out1_7                : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Bit_Concat_out1_9                : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL Data_Type_Conversion_out1_8      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay3_PS10_out1                 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL bitsll_R_1_out1_8                : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_8                : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL Data_Type_Conversion1_out1_8     : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL BitSet1_out1_6                   : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL if_tmp3_0_out1_7                 : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Delay2_PS10_out1                 : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Constant_out1_8                  : std_logic;  -- ufix1
  SIGNAL Bit_Concat1_out1_8               : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL Data_Type_Conversion3_out1_4     : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL bitsll_Q_1_1_out1_4              : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL BitSet2_out1_4                   : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL R_tmp2_sub_temp_6                : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL R_tmp2_out1_7                    : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL Bit_Slice_out1_9                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_10         : std_logic;
  SIGNAL if_tmp3_0_1_out1_8               : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL Bit_Slice2_out1_8                : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL Bit_Concat_out1_10               : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL Data_Type_Conversion_out1_9      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay_PS11_out1                  : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL bitsll_R_1_out1_9                : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_9                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL Data_Type_Conversion1_out1_9     : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL BitSet1_out1_7                   : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL if_tmp3_0_out1_8                 : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL Delay1_PS11_out1                 : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL Constant_out1_9                  : std_logic;  -- ufix1
  SIGNAL Bit_Concat1_out1_9               : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL Data_Type_Conversion3_out1_5     : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL bitsll_Q_1_1_out1_5              : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL BitSet2_out1_5                   : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL R_tmp2_sub_temp_7                : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL R_tmp2_out1_8                    : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL Bit_Slice_out1_10                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_11         : std_logic;
  SIGNAL if_tmp3_0_1_out1_9               : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL Bit_Slice2_out1_9                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL Bit_Concat_out1_11               : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL Data_Type_Conversion_out1_10     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay2_PS12_out1                 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL bitsll_R_1_out1_10               : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_10               : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL Data_Type_Conversion1_out1_10    : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL BitSet1_out1_8                   : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL if_tmp3_0_out1_9                 : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL Delay3_PS12_out1                 : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL Constant_out1_10                 : std_logic;  -- ufix1
  SIGNAL Bit_Concat1_out1_10              : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL Data_Type_Conversion3_out1_6     : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL bitsll_Q_1_1_out1_6              : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL BitSet2_out1_6                   : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL R_tmp2_sub_temp_8                : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL R_tmp2_out1_9                    : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL Bit_Slice_out1_11                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_12         : std_logic;
  SIGNAL if_tmp3_0_1_out1_10              : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL Bit_Slice2_out1_10               : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL Bit_Concat_out1_12               : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL Data_Type_Conversion_out1_11     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay_PS13_out1                  : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL bitsll_R_1_out1_11               : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_11               : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Data_Type_Conversion1_out1_11    : signed(15 DOWNTO 0);  -- int16
  SIGNAL BitSet1_out1_9                   : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL if_tmp3_0_out1_10                : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL Delay1_PS13_out1                 : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL Constant_out1_11                 : std_logic;  -- ufix1
  SIGNAL Bit_Concat1_out1_11              : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Data_Type_Conversion3_out1_7     : signed(15 DOWNTO 0);  -- int16
  SIGNAL bitsll_Q_1_1_out1_7              : signed(15 DOWNTO 0);  -- int16
  SIGNAL BitSet2_out1_7                   : signed(15 DOWNTO 0);  -- int16
  SIGNAL R_tmp2_out1_10                   : signed(15 DOWNTO 0);  -- int16
  SIGNAL Bit_Slice_out1_12                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_13         : std_logic;
  SIGNAL if_tmp3_0_1_out1_11              : signed(15 DOWNTO 0);  -- int16
  SIGNAL Bit_Slice2_out1_11               : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Bit_Concat_out1_13               : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL Data_Type_Conversion_out1_12     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay4_PS14_out1                 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL bitsll_R_1_out1_12               : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_12               : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL Data_Type_Conversion1_out1_12    : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL BitSet1_out1_10                  : signed(15 DOWNTO 0);  -- int16
  SIGNAL if_tmp3_0_out1_11                : signed(15 DOWNTO 0);  -- int16
  SIGNAL Delay5_PS14_out1                 : signed(15 DOWNTO 0);  -- int16
  SIGNAL Constant_out1_12                 : std_logic;  -- ufix1
  SIGNAL Bit_Concat1_out1_12              : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL Data_Type_Conversion3_out1_8     : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL bitsll_Q_1_1_out1_8              : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL BitSet2_out1_8                   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL R_tmp2_sub_temp_9                : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL R_tmp2_out1_11                   : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Bit_Slice_out1_13                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_14         : std_logic;
  SIGNAL if_tmp3_0_1_out1_12              : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Bit_Slice2_out1_12               : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Bit_Concat_out1_14               : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL Data_Type_Conversion_out1_13     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay2_PS15_out1                 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL bitsll_R_1_out1_13               : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_13               : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL Data_Type_Conversion1_out1_13    : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL BitSet1_out1_11                  : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL if_tmp3_0_out1_12                : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Delay3_PS15_out1                 : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Constant_out1_13                 : std_logic;  -- ufix1
  SIGNAL Bit_Concat1_out1_13              : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL Data_Type_Conversion3_out1_9     : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL bitsll_Q_1_1_out1_9              : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL BitSet2_out1_9                   : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL R_tmp2_sub_temp_10               : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL R_tmp2_out1_12                   : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL Bit_Slice_out1_14                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_15         : std_logic;
  SIGNAL if_tmp3_0_1_out1_13              : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL Bit_Slice2_out1_13               : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Bit_Concat_out1_15               : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL Data_Type_Conversion_out1_14     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay2_PS16_out1                 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL bitsll_R_1_out1_14               : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_14               : unsigned(18 DOWNTO 0);  -- ufix19
  SIGNAL Data_Type_Conversion1_out1_14    : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL BitSet1_out1_12                  : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL if_tmp3_0_out1_13                : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL Delay3_PS16_out1                 : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL Constant_out1_14                 : std_logic;  -- ufix1
  SIGNAL Bit_Concat1_out1_14              : unsigned(18 DOWNTO 0);  -- ufix19
  SIGNAL Data_Type_Conversion3_out1_10    : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL bitsll_Q_1_1_out1_10             : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL BitSet2_out1_10                  : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL R_tmp2_sub_temp_11               : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL R_tmp2_out1_13                   : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL Bit_Slice_out1_15                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_16         : std_logic;
  SIGNAL if_tmp3_0_1_out1_14              : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL Bit_Slice2_out1_14               : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Bit_Concat_out1_16               : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL Data_Type_Conversion_out1_15     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay_PS17_out1                  : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL bitsll_R_1_out1_15               : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_15               : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL Data_Type_Conversion1_out1_15    : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL BitSet1_out1_13                  : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL if_tmp3_0_out1_14                : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL Delay1_PS17_out1                 : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL Constant_out1_15                 : std_logic;  -- ufix1
  SIGNAL Bit_Concat1_out1_15              : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL Data_Type_Conversion3_out1_11    : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL bitsll_Q_1_1_out1_11             : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL BitSet2_out1_11                  : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL R_tmp2_sub_temp_12               : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL R_tmp2_out1_14                   : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL Bit_Slice_out1_16                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_17         : std_logic;
  SIGNAL if_tmp3_0_1_out1_15              : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL Bit_Slice2_out1_15               : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Concat_out1_17               : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL Data_Type_Conversion_out1_16     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay4_PS18_out1                 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL bitsll_R_1_out1_16               : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_16               : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL Data_Type_Conversion1_out1_16    : signed(20 DOWNTO 0);  -- sfix21
  SIGNAL BitSet1_out1_14                  : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL if_tmp3_0_out1_15                : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL Delay5_PS18_out1                 : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL Constant_out1_16                 : std_logic;  -- ufix1
  SIGNAL Bit_Concat1_out1_16              : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL Data_Type_Conversion3_out1_12    : signed(20 DOWNTO 0);  -- sfix21
  SIGNAL bitsll_Q_1_1_out1_12             : signed(20 DOWNTO 0);  -- sfix21
  SIGNAL BitSet2_out1_12                  : signed(20 DOWNTO 0);  -- sfix21
  SIGNAL R_tmp2_sub_temp_13               : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL R_tmp2_out1_15                   : signed(20 DOWNTO 0);  -- sfix21
  SIGNAL Bit_Slice_out1_17                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_18         : std_logic;
  SIGNAL if_tmp3_0_1_out1_16              : signed(20 DOWNTO 0);  -- sfix21
  SIGNAL Bit_Slice2_out1_16               : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Bit_Concat_out1_18               : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL Data_Type_Conversion_out1_17     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay4_PS19_out1                 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL bitsll_R_1_out1_17               : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_17               : unsigned(21 DOWNTO 0);  -- ufix22
  SIGNAL Data_Type_Conversion1_out1_17    : signed(21 DOWNTO 0);  -- sfix22
  SIGNAL BitSet1_out1_15                  : signed(20 DOWNTO 0);  -- sfix21
  SIGNAL if_tmp3_0_out1_16                : signed(20 DOWNTO 0);  -- sfix21
  SIGNAL Delay5_PS19_out1                 : signed(20 DOWNTO 0);  -- sfix21
  SIGNAL Constant_out1_17                 : std_logic;  -- ufix1
  SIGNAL Bit_Concat1_out1_17              : unsigned(21 DOWNTO 0);  -- ufix22
  SIGNAL Data_Type_Conversion3_out1_13    : signed(21 DOWNTO 0);  -- sfix22
  SIGNAL bitsll_Q_1_1_out1_13             : signed(21 DOWNTO 0);  -- sfix22
  SIGNAL BitSet2_out1_13                  : signed(21 DOWNTO 0);  -- sfix22
  SIGNAL R_tmp2_sub_temp_14               : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL R_tmp2_out1_16                   : signed(21 DOWNTO 0);  -- sfix22
  SIGNAL Bit_Slice_out1_18                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_19         : std_logic;
  SIGNAL if_tmp3_0_1_out1_17              : signed(21 DOWNTO 0);  -- sfix22
  SIGNAL Bit_Slice2_out1_17               : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Concat_out1_19               : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL Data_Type_Conversion_out1_18     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay2_PS20_out1                 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL bitsll_R_1_out1_18               : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_18               : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Data_Type_Conversion1_out1_18    : signed(22 DOWNTO 0);  -- sfix23
  SIGNAL BitSet1_out1_16                  : signed(21 DOWNTO 0);  -- sfix22
  SIGNAL if_tmp3_0_out1_17                : signed(21 DOWNTO 0);  -- sfix22
  SIGNAL Delay3_PS20_out1                 : signed(21 DOWNTO 0);  -- sfix22
  SIGNAL Constant_out1_18                 : std_logic;  -- ufix1
  SIGNAL Bit_Concat1_out1_18              : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Data_Type_Conversion3_out1_14    : signed(22 DOWNTO 0);  -- sfix23
  SIGNAL bitsll_Q_1_1_out1_14             : signed(22 DOWNTO 0);  -- sfix23
  SIGNAL BitSet2_out1_14                  : signed(22 DOWNTO 0);  -- sfix23
  SIGNAL R_tmp2_sub_temp_15               : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL R_tmp2_out1_17                   : signed(22 DOWNTO 0);  -- sfix23
  SIGNAL Bit_Slice_out1_19                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_20         : std_logic;
  SIGNAL if_tmp3_0_1_out1_18              : signed(22 DOWNTO 0);  -- sfix23
  SIGNAL Bit_Slice2_out1_18               : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Bit_Concat_out1_20               : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL Data_Type_Conversion_out1_19     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay_PS21_out1                  : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL bitsll_R_1_out1_19               : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_19               : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Data_Type_Conversion1_out1_19    : signed(23 DOWNTO 0);  -- sfix24
  SIGNAL BitSet1_out1_17                  : signed(22 DOWNTO 0);  -- sfix23
  SIGNAL if_tmp3_0_out1_18                : signed(22 DOWNTO 0);  -- sfix23
  SIGNAL Delay1_PS21_out1                 : signed(22 DOWNTO 0);  -- sfix23
  SIGNAL Constant_out1_19                 : std_logic;  -- ufix1
  SIGNAL Bit_Concat1_out1_19              : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Data_Type_Conversion3_out1_15    : signed(23 DOWNTO 0);  -- sfix24
  SIGNAL bitsll_Q_1_1_out1_15             : signed(23 DOWNTO 0);  -- sfix24
  SIGNAL BitSet2_out1_15                  : signed(23 DOWNTO 0);  -- sfix24
  SIGNAL R_tmp2_sub_temp_16               : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL R_tmp2_out1_18                   : signed(23 DOWNTO 0);  -- sfix24
  SIGNAL Bit_Slice_out1_20                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_21         : std_logic;
  SIGNAL if_tmp3_0_1_out1_19              : signed(23 DOWNTO 0);  -- sfix24
  SIGNAL Bit_Slice2_out1_19               : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Concat_out1_21               : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL Data_Type_Conversion_out1_20     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay4_PS22_out1                 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL bitsll_R_1_out1_20               : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_20               : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL Data_Type_Conversion1_out1_20    : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL BitSet1_out1_18                  : signed(23 DOWNTO 0);  -- sfix24
  SIGNAL if_tmp3_0_out1_19                : signed(23 DOWNTO 0);  -- sfix24
  SIGNAL Delay5_PS22_out1                 : signed(23 DOWNTO 0);  -- sfix24
  SIGNAL Constant_out1_20                 : std_logic;  -- ufix1
  SIGNAL Bit_Concat1_out1_20              : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL Data_Type_Conversion3_out1_16    : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL bitsll_Q_1_1_out1_16             : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL BitSet2_out1_16                  : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL R_tmp2_sub_temp_17               : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL R_tmp2_out1_19                   : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL Bit_Slice_out1_21                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_22         : std_logic;
  SIGNAL if_tmp3_0_1_out1_20              : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL Bit_Slice2_out1_20               : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Concat_out1_22               : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL Data_Type_Conversion_out1_21     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay6_PS23_out1                 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL bitsll_R_1_out1_21               : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_21               : unsigned(25 DOWNTO 0);  -- ufix26
  SIGNAL Data_Type_Conversion1_out1_21    : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL BitSet1_out1_19                  : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL if_tmp3_0_out1_20                : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL Delay7_PS23_out1                 : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL Constant_out1_21                 : std_logic;  -- ufix1
  SIGNAL Bit_Concat1_out1_21              : unsigned(25 DOWNTO 0);  -- ufix26
  SIGNAL Data_Type_Conversion3_out1_17    : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL bitsll_Q_1_1_out1_17             : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL BitSet2_out1_17                  : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL R_tmp2_sub_temp_18               : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL R_tmp2_out1_20                   : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice_out1_22                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_23         : std_logic;
  SIGNAL if_tmp3_0_1_out1_21              : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Bit_Slice2_out1_21               : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Bit_Concat_out1_23               : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL Data_Type_Conversion_out1_22     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay2_PS24_out1                 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL bitsll_R_1_out1_22               : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_22               : unsigned(26 DOWNTO 0);  -- ufix27
  SIGNAL Data_Type_Conversion1_out1_22    : signed(26 DOWNTO 0);  -- sfix27
  SIGNAL BitSet1_out1_20                  : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL if_tmp3_0_out1_21                : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Delay3_PS24_out1                 : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Constant_out1_22                 : std_logic;  -- ufix1
  SIGNAL Bit_Concat1_out1_22              : unsigned(26 DOWNTO 0);  -- ufix27
  SIGNAL Data_Type_Conversion3_out1_18    : signed(26 DOWNTO 0);  -- sfix27
  SIGNAL bitsll_Q_1_1_out1_18             : signed(26 DOWNTO 0);  -- sfix27
  SIGNAL BitSet2_out1_18                  : signed(26 DOWNTO 0);  -- sfix27
  SIGNAL R_tmp2_sub_temp_19               : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL R_tmp2_out1_21                   : signed(26 DOWNTO 0);  -- sfix27
  SIGNAL Bit_Slice_out1_23                : std_logic;  -- ufix1
  SIGNAL if_tmp3_0_1_out1_22              : signed(26 DOWNTO 0);  -- sfix27
  SIGNAL Bit_Slice2_out1_22               : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_24               : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL Data_Type_Conversion_out1_23     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Delay_PS25_out1                  : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL bitsll_R_1_out1_23               : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL BitSet1_out1_21                  : signed(26 DOWNTO 0);  -- sfix27
  SIGNAL if_tmp3_0_out1_22                : signed(26 DOWNTO 0);  -- sfix27
  SIGNAL Delay1_PS25_out1                 : signed(26 DOWNTO 0);  -- sfix27
  SIGNAL Constant_out1_23                 : std_logic;  -- ufix1
  SIGNAL Bit_Concat1_out1_23              : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL Data_Type_Conversion3_out1_19    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL bitsll_Q_1_out1_3                : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL BitSet_out1_3                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL R_tmp2_sub_temp_20               : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL R_tmp2_out1_22                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice_out1_24                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_24         : std_logic;
  SIGNAL BitSet1_out1_22                  : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_tmp3_0_out1_23                : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL BitSlice_out1_1                  : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Delay9_PS26_out1                 : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL BitSlice1_out1                   : std_logic;  -- ufix1
  SIGNAL bitget_Mant_tmp_2_0_out1         : std_logic;  -- ufix1
  SIGNAL if_tmp3_0_1_out1_23              : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL R_0_out1                         : std_logic;
  SIGNAL BitSlice_out1_2                  : std_logic;  -- ufix1
  SIGNAL bitget_Mant_tmp_1_0_out1         : std_logic;  -- ufix1
  SIGNAL Delay8_PS26_out1                 : std_logic;
  SIGNAL alphabitget_Mant_tmp_2_0_out1    : std_logic;  -- ufix1
  SIGNAL alphabitget_Mant_tmp_1_0_out1    : std_logic;  -- ufix1
  SIGNAL alpha0_out1_2                    : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_25               : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL alpha2_out1_1                    : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL Mant_tmp_cast_2_like_Man_out1    : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL if_bitget_Mant_tmp_1_0_out1      : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL Delay_out1_1                     : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL BitSlice2_out1                   : std_logic;  -- ufix1
  SIGNAL bitget_Mant_tmp_Mant_tmp_Word_out1 : std_logic;  -- ufix1
  SIGNAL C_out1_2                         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL exp_a_cor_cfType_ExponentBia_out1 : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL BitSlice1_out1_1                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay1_out1                      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay22_PS26_reg                 : vector_of_unsigned8(0 TO 22);  -- ufix8 [23]
  SIGNAL Delay22_PS26_reg_next            : vector_of_unsigned8(0 TO 22);  -- ufix8 [23]
  SIGNAL Delay22_PS26_out1                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay2_out1_2                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL alpha1_out1_2                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Exp_1_out1                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay1_out1_1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_bitget_Mant_tmp_Mant_tmp_Wor_out1 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL C_out1_3                         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_aExponent_0_aMantissa_out1    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL aSign_0_out1                     : std_logic;  -- ufix1
  SIGNAL aExponent_cfType_Exponent_I_out1_1 : std_logic;  -- ufix1
  SIGNAL alphaaSign_0_aExponent_out1      : std_logic;  -- ufix1
  SIGNAL alphaaSign_0_aExponent_out1_1    : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_25         : std_logic;  -- ufix1
  SIGNAL C_out1_4                         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_aSign_0_aExponent_out1        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay9_reg                       : vector_of_unsigned8(0 TO 25);  -- ufix8 [26]
  SIGNAL Delay9_reg_next                  : vector_of_unsigned8(0 TO 25);  -- ufix8 [26]
  SIGNAL Delay9_out1                      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_aSign_1_aExponent_out1        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch6_out1                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay1_out1_2                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant_out1_24                 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL BitSlice3_out1                   : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL C_out1_5                         : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL C1_out1                          : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_aExponent_0_aMantissa_1_out1  : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL C1_out1_1                        : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_aSign_0_aExponent_1_out1      : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Delay8_reg                       : vector_of_unsigned23(0 TO 25);  -- ufix23 [26]
  SIGNAL Delay8_reg_next                  : vector_of_unsigned23(0 TO 25);  -- ufix23 [26]
  SIGNAL Delay8_out1                      : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_aSign_1_aExponent_1_out1      : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Switch5_out1                     : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Delay_out1_2                     : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL nfp_out_pack                     : unsigned(31 DOWNTO 0);  -- ufix32

BEGIN
  nfp_in_unsigned <= unsigned(nfp_in);

  -- Split 32 bit word into FP sign, exponent, mantissa
  aSign <= nfp_in_unsigned(31);
  aExponent <= nfp_in_unsigned(30 DOWNTO 23);
  aMantissa <= nfp_in_unsigned(22 DOWNTO 0);

  Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_out1 <= to_unsigned(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_out1 <= aMantissa;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  
  aMantissa_0_out1 <= '1' WHEN Delay5_out1 = to_unsigned(16#000000#, 23) ELSE
      '0';

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_out1 <= aExponent;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  
  aSign_1_out1 <= '1' WHEN Delay4_out1 = to_unsigned(16#00#, 8) ELSE
      '0';

  alphaaSign_0_aExponent_1_out1 <= aMantissa_0_out1 AND aSign_1_out1;

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_out1 <= aSign;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  C2_out1 <= '0';

  
  if_aSign_0_aExponent_2_out1 <= Delay3_out1 WHEN alphaaSign_0_aExponent_1_out1 = '0' ELSE
      C2_out1;

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_reg(0) <= '0';
      Delay2_reg(1) <= '0';
      Delay2_reg(2) <= '0';
      Delay2_reg(3) <= '0';
      Delay2_reg(4) <= '0';
      Delay2_reg(5) <= '0';
      Delay2_reg(6) <= '0';
      Delay2_reg(7) <= '0';
      Delay2_reg(8) <= '0';
      Delay2_reg(9) <= '0';
      Delay2_reg(10) <= '0';
      Delay2_reg(11) <= '0';
      Delay2_reg(12) <= '0';
      Delay2_reg(13) <= '0';
      Delay2_reg(14) <= '0';
      Delay2_reg(15) <= '0';
      Delay2_reg(16) <= '0';
      Delay2_reg(17) <= '0';
      Delay2_reg(18) <= '0';
      Delay2_reg(19) <= '0';
      Delay2_reg(20) <= '0';
      Delay2_reg(21) <= '0';
      Delay2_reg(22) <= '0';
      Delay2_reg(23) <= '0';
      Delay2_reg(24) <= '0';
      Delay2_reg(25) <= '0';
      Delay2_reg(26) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_reg(0) <= Delay2_reg_next(0);
        Delay2_reg(1) <= Delay2_reg_next(1);
        Delay2_reg(2) <= Delay2_reg_next(2);
        Delay2_reg(3) <= Delay2_reg_next(3);
        Delay2_reg(4) <= Delay2_reg_next(4);
        Delay2_reg(5) <= Delay2_reg_next(5);
        Delay2_reg(6) <= Delay2_reg_next(6);
        Delay2_reg(7) <= Delay2_reg_next(7);
        Delay2_reg(8) <= Delay2_reg_next(8);
        Delay2_reg(9) <= Delay2_reg_next(9);
        Delay2_reg(10) <= Delay2_reg_next(10);
        Delay2_reg(11) <= Delay2_reg_next(11);
        Delay2_reg(12) <= Delay2_reg_next(12);
        Delay2_reg(13) <= Delay2_reg_next(13);
        Delay2_reg(14) <= Delay2_reg_next(14);
        Delay2_reg(15) <= Delay2_reg_next(15);
        Delay2_reg(16) <= Delay2_reg_next(16);
        Delay2_reg(17) <= Delay2_reg_next(17);
        Delay2_reg(18) <= Delay2_reg_next(18);
        Delay2_reg(19) <= Delay2_reg_next(19);
        Delay2_reg(20) <= Delay2_reg_next(20);
        Delay2_reg(21) <= Delay2_reg_next(21);
        Delay2_reg(22) <= Delay2_reg_next(22);
        Delay2_reg(23) <= Delay2_reg_next(23);
        Delay2_reg(24) <= Delay2_reg_next(24);
        Delay2_reg(25) <= Delay2_reg_next(25);
        Delay2_reg(26) <= Delay2_reg_next(26);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1 <= Delay2_reg(26);
  Delay2_reg_next(0) <= if_aSign_0_aExponent_2_out1;
  Delay2_reg_next(1) <= Delay2_reg(0);
  Delay2_reg_next(2) <= Delay2_reg(1);
  Delay2_reg_next(3) <= Delay2_reg(2);
  Delay2_reg_next(4) <= Delay2_reg(3);
  Delay2_reg_next(5) <= Delay2_reg(4);
  Delay2_reg_next(6) <= Delay2_reg(5);
  Delay2_reg_next(7) <= Delay2_reg(6);
  Delay2_reg_next(8) <= Delay2_reg(7);
  Delay2_reg_next(9) <= Delay2_reg(8);
  Delay2_reg_next(10) <= Delay2_reg(9);
  Delay2_reg_next(11) <= Delay2_reg(10);
  Delay2_reg_next(12) <= Delay2_reg(11);
  Delay2_reg_next(13) <= Delay2_reg(12);
  Delay2_reg_next(14) <= Delay2_reg(13);
  Delay2_reg_next(15) <= Delay2_reg(14);
  Delay2_reg_next(16) <= Delay2_reg(15);
  Delay2_reg_next(17) <= Delay2_reg(16);
  Delay2_reg_next(18) <= Delay2_reg(17);
  Delay2_reg_next(19) <= Delay2_reg(18);
  Delay2_reg_next(20) <= Delay2_reg(19);
  Delay2_reg_next(21) <= Delay2_reg(20);
  Delay2_reg_next(22) <= Delay2_reg(21);
  Delay2_reg_next(23) <= Delay2_reg(22);
  Delay2_reg_next(24) <= Delay2_reg(23);
  Delay2_reg_next(25) <= Delay2_reg(24);
  Delay2_reg_next(26) <= Delay2_reg(25);

  Constant8_out1 <= '1';

  Constant7_out1 <= to_unsigned(16#1B#, 8);

  Delay4_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_out1_1 <= Relational_Operator_relop1;
      END IF;
    END IF;
  END PROCESS Delay4_1_process;


  Logical_Operator2_out1 <=  NOT Delay4_out1_1;

  Logical_Operator_out1 <= Constant8_out1 AND Logical_Operator2_out1;

  Delay3_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1_1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_out1_1 <= Add_out1;
      END IF;
    END IF;
  END PROCESS Delay3_1_process;


  Add_add_cast <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & Logical_Operator_out1;
  Add_out1 <= Delay3_out1_1 + Add_add_cast;

  
  Relational_Operator_relop1 <= '1' WHEN Add_out1 > Constant7_out1 ELSE
      '0';

  Constant1_out1 <= to_unsigned(16#00#, 8);

  
  aSign_1_out1_1 <= '1' WHEN Delay3_out1 = '1' ELSE
      '0';

  
  aExponent_cfType_Exponent_I_out1 <= '1' WHEN Delay4_out1 = to_unsigned(16#FF#, 8) ELSE
      '0';

  alphaaSign_1_aExponent_out1 <= aSign_1_out1_1 OR aExponent_cfType_Exponent_I_out1;

  Delay6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay6_reg(0) <= '0';
      Delay6_reg(1) <= '0';
      Delay6_reg(2) <= '0';
      Delay6_reg(3) <= '0';
      Delay6_reg(4) <= '0';
      Delay6_reg(5) <= '0';
      Delay6_reg(6) <= '0';
      Delay6_reg(7) <= '0';
      Delay6_reg(8) <= '0';
      Delay6_reg(9) <= '0';
      Delay6_reg(10) <= '0';
      Delay6_reg(11) <= '0';
      Delay6_reg(12) <= '0';
      Delay6_reg(13) <= '0';
      Delay6_reg(14) <= '0';
      Delay6_reg(15) <= '0';
      Delay6_reg(16) <= '0';
      Delay6_reg(17) <= '0';
      Delay6_reg(18) <= '0';
      Delay6_reg(19) <= '0';
      Delay6_reg(20) <= '0';
      Delay6_reg(21) <= '0';
      Delay6_reg(22) <= '0';
      Delay6_reg(23) <= '0';
      Delay6_reg(24) <= '0';
      Delay6_reg(25) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay6_reg(0) <= Delay6_reg_next(0);
        Delay6_reg(1) <= Delay6_reg_next(1);
        Delay6_reg(2) <= Delay6_reg_next(2);
        Delay6_reg(3) <= Delay6_reg_next(3);
        Delay6_reg(4) <= Delay6_reg_next(4);
        Delay6_reg(5) <= Delay6_reg_next(5);
        Delay6_reg(6) <= Delay6_reg_next(6);
        Delay6_reg(7) <= Delay6_reg_next(7);
        Delay6_reg(8) <= Delay6_reg_next(8);
        Delay6_reg(9) <= Delay6_reg_next(9);
        Delay6_reg(10) <= Delay6_reg_next(10);
        Delay6_reg(11) <= Delay6_reg_next(11);
        Delay6_reg(12) <= Delay6_reg_next(12);
        Delay6_reg(13) <= Delay6_reg_next(13);
        Delay6_reg(14) <= Delay6_reg_next(14);
        Delay6_reg(15) <= Delay6_reg_next(15);
        Delay6_reg(16) <= Delay6_reg_next(16);
        Delay6_reg(17) <= Delay6_reg_next(17);
        Delay6_reg(18) <= Delay6_reg_next(18);
        Delay6_reg(19) <= Delay6_reg_next(19);
        Delay6_reg(20) <= Delay6_reg_next(20);
        Delay6_reg(21) <= Delay6_reg_next(21);
        Delay6_reg(22) <= Delay6_reg_next(22);
        Delay6_reg(23) <= Delay6_reg_next(23);
        Delay6_reg(24) <= Delay6_reg_next(24);
        Delay6_reg(25) <= Delay6_reg_next(25);
      END IF;
    END IF;
  END PROCESS Delay6_process;

  Delay6_out1 <= Delay6_reg(25);
  Delay6_reg_next(0) <= alphaaSign_1_aExponent_out1;
  Delay6_reg_next(1) <= Delay6_reg(0);
  Delay6_reg_next(2) <= Delay6_reg(1);
  Delay6_reg_next(3) <= Delay6_reg(2);
  Delay6_reg_next(4) <= Delay6_reg(3);
  Delay6_reg_next(5) <= Delay6_reg(4);
  Delay6_reg_next(6) <= Delay6_reg(5);
  Delay6_reg_next(7) <= Delay6_reg(6);
  Delay6_reg_next(8) <= Delay6_reg(7);
  Delay6_reg_next(9) <= Delay6_reg(8);
  Delay6_reg_next(10) <= Delay6_reg(9);
  Delay6_reg_next(11) <= Delay6_reg(10);
  Delay6_reg_next(12) <= Delay6_reg(11);
  Delay6_reg_next(13) <= Delay6_reg(12);
  Delay6_reg_next(14) <= Delay6_reg(13);
  Delay6_reg_next(15) <= Delay6_reg(14);
  Delay6_reg_next(16) <= Delay6_reg(15);
  Delay6_reg_next(17) <= Delay6_reg(16);
  Delay6_reg_next(18) <= Delay6_reg(17);
  Delay6_reg_next(19) <= Delay6_reg(18);
  Delay6_reg_next(20) <= Delay6_reg(19);
  Delay6_reg_next(21) <= Delay6_reg(20);
  Delay6_reg_next(22) <= Delay6_reg(21);
  Delay6_reg_next(23) <= Delay6_reg(22);
  Delay6_reg_next(24) <= Delay6_reg(23);
  Delay6_reg_next(25) <= Delay6_reg(24);

  
  aExponent_0_out1 <= '1' WHEN Delay4_out1 = to_unsigned(16#00#, 8) ELSE
      '0';

  
  aMantissa_0_out1_1 <= '1' WHEN Delay5_out1 = to_unsigned(16#000000#, 23) ELSE
      '0';

  Denormal_Support_out1 <= '0';

  Logical_Operator1_out1 <=  NOT Denormal_Support_out1;

  Logical_Operator_out1_1 <= aMantissa_0_out1_1 OR Logical_Operator1_out1;

  alphaaExponent_0_aMantissa_out1 <= aExponent_0_out1 AND Logical_Operator_out1_1;

  Delay7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay7_reg(0) <= '0';
      Delay7_reg(1) <= '0';
      Delay7_reg(2) <= '0';
      Delay7_reg(3) <= '0';
      Delay7_reg(4) <= '0';
      Delay7_reg(5) <= '0';
      Delay7_reg(6) <= '0';
      Delay7_reg(7) <= '0';
      Delay7_reg(8) <= '0';
      Delay7_reg(9) <= '0';
      Delay7_reg(10) <= '0';
      Delay7_reg(11) <= '0';
      Delay7_reg(12) <= '0';
      Delay7_reg(13) <= '0';
      Delay7_reg(14) <= '0';
      Delay7_reg(15) <= '0';
      Delay7_reg(16) <= '0';
      Delay7_reg(17) <= '0';
      Delay7_reg(18) <= '0';
      Delay7_reg(19) <= '0';
      Delay7_reg(20) <= '0';
      Delay7_reg(21) <= '0';
      Delay7_reg(22) <= '0';
      Delay7_reg(23) <= '0';
      Delay7_reg(24) <= '0';
      Delay7_reg(25) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay7_reg(0) <= Delay7_reg_next(0);
        Delay7_reg(1) <= Delay7_reg_next(1);
        Delay7_reg(2) <= Delay7_reg_next(2);
        Delay7_reg(3) <= Delay7_reg_next(3);
        Delay7_reg(4) <= Delay7_reg_next(4);
        Delay7_reg(5) <= Delay7_reg_next(5);
        Delay7_reg(6) <= Delay7_reg_next(6);
        Delay7_reg(7) <= Delay7_reg_next(7);
        Delay7_reg(8) <= Delay7_reg_next(8);
        Delay7_reg(9) <= Delay7_reg_next(9);
        Delay7_reg(10) <= Delay7_reg_next(10);
        Delay7_reg(11) <= Delay7_reg_next(11);
        Delay7_reg(12) <= Delay7_reg_next(12);
        Delay7_reg(13) <= Delay7_reg_next(13);
        Delay7_reg(14) <= Delay7_reg_next(14);
        Delay7_reg(15) <= Delay7_reg_next(15);
        Delay7_reg(16) <= Delay7_reg_next(16);
        Delay7_reg(17) <= Delay7_reg_next(17);
        Delay7_reg(18) <= Delay7_reg_next(18);
        Delay7_reg(19) <= Delay7_reg_next(19);
        Delay7_reg(20) <= Delay7_reg_next(20);
        Delay7_reg(21) <= Delay7_reg_next(21);
        Delay7_reg(22) <= Delay7_reg_next(22);
        Delay7_reg(23) <= Delay7_reg_next(23);
        Delay7_reg(24) <= Delay7_reg_next(24);
        Delay7_reg(25) <= Delay7_reg_next(25);
      END IF;
    END IF;
  END PROCESS Delay7_process;

  Delay7_out1 <= Delay7_reg(25);
  Delay7_reg_next(0) <= alphaaExponent_0_aMantissa_out1;
  Delay7_reg_next(1) <= Delay7_reg(0);
  Delay7_reg_next(2) <= Delay7_reg(1);
  Delay7_reg_next(3) <= Delay7_reg(2);
  Delay7_reg_next(4) <= Delay7_reg(3);
  Delay7_reg_next(5) <= Delay7_reg(4);
  Delay7_reg_next(6) <= Delay7_reg(5);
  Delay7_reg_next(7) <= Delay7_reg(6);
  Delay7_reg_next(8) <= Delay7_reg(7);
  Delay7_reg_next(9) <= Delay7_reg(8);
  Delay7_reg_next(10) <= Delay7_reg(9);
  Delay7_reg_next(11) <= Delay7_reg(10);
  Delay7_reg_next(12) <= Delay7_reg(11);
  Delay7_reg_next(13) <= Delay7_reg(12);
  Delay7_reg_next(14) <= Delay7_reg(13);
  Delay7_reg_next(15) <= Delay7_reg(14);
  Delay7_reg_next(16) <= Delay7_reg(15);
  Delay7_reg_next(17) <= Delay7_reg(16);
  Delay7_reg_next(18) <= Delay7_reg(17);
  Delay7_reg_next(19) <= Delay7_reg(18);
  Delay7_reg_next(20) <= Delay7_reg(19);
  Delay7_reg_next(21) <= Delay7_reg(20);
  Delay7_reg_next(22) <= Delay7_reg(21);
  Delay7_reg_next(23) <= Delay7_reg(22);
  Delay7_reg_next(24) <= Delay7_reg(23);
  Delay7_reg_next(25) <= Delay7_reg(24);

  
  Exponent_0_out1 <= '1' WHEN Delay4_out1 = to_unsigned(16#00#, 8) ELSE
      '0';

  C_out1 <= to_unsigned(16#01#, 8);

  
  if_Exponent_0_out1 <= Delay4_out1 WHEN Exponent_0_out1 = '0' ELSE
      C_out1;

  Delay3_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1_2 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_out1_2 <= if_Exponent_0_out1;
      END IF;
    END IF;
  END PROCESS Delay3_2_process;


  BitSlice_out1 <= Delay3_out1_2(0);

  alpha0_out1 <= '0';

  
  Exponent_0_out1_1 <= '1' WHEN Delay4_out1 = to_unsigned(16#00#, 8) ELSE
      '0';

  
  Exponent_cfType_Exponent_In_out1 <= '1' WHEN Delay4_out1 = to_unsigned(16#FF#, 8) ELSE
      '0';

  alphaExponent_0_Exponent_out1 <= Exponent_0_out1_1 OR Exponent_cfType_Exponent_In_out1;

  alpha1_out1 <= '1';

  Bit_Concat1_out1 <= alpha1_out1 & Delay5_out1;

  alpha0_out1_1 <= '0';

  Bit_Concat_out1 <= alpha0_out1_1 & Delay5_out1;

  
  if_Exponent_0_Exponent_out1 <= Bit_Concat1_out1 WHEN alphaExponent_0_Exponent_out1 = '0' ELSE
      Bit_Concat_out1;

  Delay2_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1_1 <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_out1_1 <= if_Exponent_0_Exponent_out1;
      END IF;
    END IF;
  END PROCESS Delay2_1_process;


  Bit_Concat_out1_1 <= alpha0_out1 & Delay2_out1_1;

  alpha1_out1_1 <= '0';

  Bit_Concat1_out1_1 <= Bit_Concat_out1_1 & alpha1_out1_1;

  Bit_Shift_out1 <= Bit_Concat1_out1_1 sll 1;

  
  if_bitget_exp_a_norm_1_out1 <= Bit_Shift_out1 WHEN BitSlice_out1 = '0' ELSE
      Bit_Concat1_out1_1;

  Bit_Slice_out1 <= if_bitget_exp_a_norm_1_out1(25 DOWNTO 24);

  alpha2_out1 <= to_unsigned(16#0#, 2);

  Constant_out1 <= to_unsigned(16#1#, 2);

  Add_sub_cast <= signed(resize(Bit_Slice_out1, 32));
  Add_sub_cast_1 <= signed(resize(Constant_out1, 32));
  Add_sub_temp <= Add_sub_cast - Add_sub_cast_1;
  Add_out1_1 <= unsigned(Add_sub_temp(1 DOWNTO 0));

  Bit_Concat2_out1 <= alpha2_out1 & Add_out1_1;

  Bit_Slice1_out1 <= if_bitget_exp_a_norm_1_out1(23 DOWNTO 0);

  Bit_Concat3_out1 <= Bit_Concat2_out1 & Bit_Slice1_out1;

  Data_Type_Conversion_out1 <= signed(Bit_Concat3_out1);

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= to_signed(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1 <= Data_Type_Conversion_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Delay29_PS4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay29_PS4_out1 <= to_signed(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay29_PS4_out1 <= Delay_out1;
      END IF;
    END IF;
  END PROCESS Delay29_PS4_process;


  bitsll_R_1_out1 <= Delay29_PS4_out1 sll 1;

  Bit_Slice1_out1_1 <= unsigned(bitsll_R_1_out1(27 DOWNTO 23));

  Data_Type_Conversion1_out1 <= signed(Bit_Slice1_out1_1);

  alpha41943040_out1 <= to_signed(16#05#, 5);

  R_41943040_sub_temp <= resize(Data_Type_Conversion1_out1, 32) - resize(alpha41943040_out1, 32);
  R_41943040_out1 <= R_41943040_sub_temp(4 DOWNTO 0);

  Bit_Slice_out1_1 <= R_41943040_out1(4);

  Logical_Operator_out1_2 <=  NOT Bit_Slice_out1_1;

  Bit_Slice2_out1 <= unsigned(bitsll_R_1_out1(22 DOWNTO 0));

  Bit_Concat_out1_2 <= unsigned(R_41943040_out1) & Bit_Slice2_out1;

  Data_Type_Conversion_out1_1 <= signed(Bit_Concat_out1_2);

  
  if_tmp3_0_1_out1 <= bitsll_R_1_out1 WHEN Logical_Operator_out1_2 = '0' ELSE
      Data_Type_Conversion_out1_1;

  bitsll_R_1_out1_1 <= if_tmp3_0_1_out1 sll 1;

  Bit_Slice1_out1_2 <= unsigned(bitsll_R_1_out1_1(27 DOWNTO 22));

  Data_Type_Conversion1_out1_1 <= signed(Bit_Slice1_out1_2);

  alpha16777216_out1 <= to_signed(16#02#, 5);

  C_out1_1 <= to_signed(16#03#, 5);

  
  if_tmp3_0_out1 <= alpha16777216_out1 WHEN Logical_Operator_out1_2 = '0' ELSE
      C_out1_1;

  Constant_out1_1 <= '0';

  Bit_Concat1_out1_2 <= unsigned(if_tmp3_0_out1) & Constant_out1_1;

  Data_Type_Conversion2_out1 <= signed(Bit_Concat1_out1_2);

  bitsll_Q_1_out1 <= Data_Type_Conversion2_out1 sll 1;

  BitSet_out1 <= bitsll_Q_1_out1 OR to_signed(16#01#, 6);

  R_tmp2_sub_temp <= resize(Data_Type_Conversion1_out1_1, 32) - resize(BitSet_out1, 32);
  R_tmp2_out1 <= R_tmp2_sub_temp(5 DOWNTO 0);

  Bit_Slice_out1_2 <= R_tmp2_out1(5);

  Logical_Operator_out1_3 <=  NOT Bit_Slice_out1_2;

  
  if_tmp3_0_1_out1_1 <= Data_Type_Conversion1_out1_1 WHEN Logical_Operator_out1_3 = '0' ELSE
      R_tmp2_out1;

  Bit_Slice2_out1_1 <= unsigned(bitsll_R_1_out1_1(21 DOWNTO 0));

  Bit_Concat_out1_3 <= unsigned(if_tmp3_0_1_out1_1) & Bit_Slice2_out1_1;

  Data_Type_Conversion_out1_2 <= signed(Bit_Concat_out1_3);

  Delay3_PS5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_PS5_out1 <= to_signed(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_PS5_out1 <= Data_Type_Conversion_out1_2;
      END IF;
    END IF;
  END PROCESS Delay3_PS5_process;


  bitsll_R_1_out1_2 <= Delay3_PS5_out1 sll 1;

  Bit_Slice1_out1_3 <= unsigned(bitsll_R_1_out1_2(27 DOWNTO 21));

  Data_Type_Conversion1_out1_2 <= signed(Bit_Slice1_out1_3);

  BitSet1_out1 <= Data_Type_Conversion2_out1 OR to_signed(16#01#, 6);

  
  if_tmp3_0_out1_1 <= Data_Type_Conversion2_out1 WHEN Logical_Operator_out1_3 = '0' ELSE
      BitSet1_out1;

  Delay2_PS5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_PS5_out1 <= to_signed(16#00#, 6);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_PS5_out1 <= if_tmp3_0_out1_1;
      END IF;
    END IF;
  END PROCESS Delay2_PS5_process;


  Constant_out1_2 <= '0';

  Bit_Concat1_out1_3 <= unsigned(Delay2_PS5_out1) & Constant_out1_2;

  Data_Type_Conversion2_out1_1 <= signed(Bit_Concat1_out1_3);

  bitsll_Q_1_out1_1 <= Data_Type_Conversion2_out1_1 sll 1;

  BitSet_out1_1 <= bitsll_Q_1_out1_1 OR to_signed(16#01#, 7);

  R_tmp2_sub_temp_1 <= resize(Data_Type_Conversion1_out1_2, 32) - resize(BitSet_out1_1, 32);
  R_tmp2_out1_1 <= R_tmp2_sub_temp_1(6 DOWNTO 0);

  Bit_Slice_out1_3 <= R_tmp2_out1_1(6);

  Logical_Operator_out1_4 <=  NOT Bit_Slice_out1_3;

  
  if_tmp3_0_1_out1_2 <= Data_Type_Conversion1_out1_2 WHEN Logical_Operator_out1_4 = '0' ELSE
      R_tmp2_out1_1;

  Bit_Slice2_out1_2 <= unsigned(bitsll_R_1_out1_2(20 DOWNTO 0));

  Bit_Concat_out1_4 <= unsigned(if_tmp3_0_1_out1_2) & Bit_Slice2_out1_2;

  Data_Type_Conversion_out1_3 <= signed(Bit_Concat_out1_4);

  bitsll_R_1_out1_3 <= Data_Type_Conversion_out1_3 sll 1;

  Bit_Slice1_out1_4 <= unsigned(bitsll_R_1_out1_3(27 DOWNTO 20));

  Data_Type_Conversion1_out1_3 <= signed(Bit_Slice1_out1_4);

  BitSet1_out1_1 <= Data_Type_Conversion2_out1_1 OR to_signed(16#01#, 7);

  
  if_tmp3_0_out1_2 <= Data_Type_Conversion2_out1_1 WHEN Logical_Operator_out1_4 = '0' ELSE
      BitSet1_out1_1;

  Constant_out1_3 <= '0';

  Bit_Concat1_out1_4 <= unsigned(if_tmp3_0_out1_2) & Constant_out1_3;

  Data_Type_Conversion2_out1_2 <= signed(Bit_Concat1_out1_4);

  bitsll_Q_1_out1_2 <= Data_Type_Conversion2_out1_2 sll 1;

  BitSet_out1_2 <= bitsll_Q_1_out1_2 OR to_signed(16#01#, 8);

  R_tmp2_out1_2 <= Data_Type_Conversion1_out1_3 - BitSet_out1_2;

  Bit_Slice_out1_4 <= R_tmp2_out1_2(7);

  Logical_Operator_out1_5 <=  NOT Bit_Slice_out1_4;

  
  if_tmp3_0_1_out1_3 <= Data_Type_Conversion1_out1_3 WHEN Logical_Operator_out1_5 = '0' ELSE
      R_tmp2_out1_2;

  Bit_Slice2_out1_3 <= unsigned(bitsll_R_1_out1_3(19 DOWNTO 0));

  Bit_Concat_out1_5 <= unsigned(if_tmp3_0_1_out1_3) & Bit_Slice2_out1_3;

  Data_Type_Conversion_out1_4 <= signed(Bit_Concat_out1_5);

  Delay5_PS6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_PS6_out1 <= to_signed(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_PS6_out1 <= Data_Type_Conversion_out1_4;
      END IF;
    END IF;
  END PROCESS Delay5_PS6_process;


  bitsll_R_1_out1_4 <= Delay5_PS6_out1 sll 1;

  Bit_Slice1_out1_5 <= unsigned(bitsll_R_1_out1_4(27 DOWNTO 19));

  Data_Type_Conversion1_out1_4 <= signed(Bit_Slice1_out1_5);

  BitSet1_out1_2 <= Data_Type_Conversion2_out1_2 OR to_signed(16#01#, 8);

  
  if_tmp3_0_out1_3 <= Data_Type_Conversion2_out1_2 WHEN Logical_Operator_out1_5 = '0' ELSE
      BitSet1_out1_2;

  Delay4_PS6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_PS6_out1 <= to_signed(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_PS6_out1 <= if_tmp3_0_out1_3;
      END IF;
    END IF;
  END PROCESS Delay4_PS6_process;


  Constant_out1_4 <= '0';

  Bit_Concat1_out1_5 <= unsigned(Delay4_PS6_out1) & Constant_out1_4;

  Data_Type_Conversion3_out1 <= signed(Bit_Concat1_out1_5);

  bitsll_Q_1_1_out1 <= Data_Type_Conversion3_out1 sll 1;

  BitSet2_out1 <= bitsll_Q_1_1_out1 OR to_signed(16#001#, 9);

  R_tmp2_sub_temp_2 <= resize(Data_Type_Conversion1_out1_4, 32) - resize(BitSet2_out1, 32);
  R_tmp2_out1_3 <= R_tmp2_sub_temp_2(8 DOWNTO 0);

  Bit_Slice_out1_5 <= R_tmp2_out1_3(8);

  Logical_Operator_out1_6 <=  NOT Bit_Slice_out1_5;

  
  if_tmp3_0_1_out1_4 <= Data_Type_Conversion1_out1_4 WHEN Logical_Operator_out1_6 = '0' ELSE
      R_tmp2_out1_3;

  Bit_Slice2_out1_4 <= unsigned(bitsll_R_1_out1_4(18 DOWNTO 0));

  Bit_Concat_out1_6 <= unsigned(if_tmp3_0_1_out1_4) & Bit_Slice2_out1_4;

  Data_Type_Conversion_out1_5 <= signed(Bit_Concat_out1_6);

  Delay10_PS7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay10_PS7_out1 <= to_signed(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay10_PS7_out1 <= Data_Type_Conversion_out1_5;
      END IF;
    END IF;
  END PROCESS Delay10_PS7_process;


  bitsll_R_1_out1_5 <= Delay10_PS7_out1 sll 1;

  Split_Remainder_accordingly_out1 <= unsigned(bitsll_R_1_out1_5(27 DOWNTO 18));

  Data_Type_Conversion1_out1_5 <= signed(Split_Remainder_accordingly_out1);

  BitSet1_out1_3 <= Data_Type_Conversion3_out1 OR to_signed(16#001#, 9);

  
  if_tmp3_0_out1_4 <= Data_Type_Conversion3_out1 WHEN Logical_Operator_out1_6 = '0' ELSE
      BitSet1_out1_3;

  Delay11_PS7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay11_PS7_out1 <= to_signed(16#000#, 9);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay11_PS7_out1 <= if_tmp3_0_out1_4;
      END IF;
    END IF;
  END PROCESS Delay11_PS7_process;


  Constant_out1_5 <= '0';

  Build_Quotient_bit_by_bit_out1 <= unsigned(Delay11_PS7_out1) & Constant_out1_5;

  Data_Type_Conversion3_out1_1 <= signed(Build_Quotient_bit_by_bit_out1);

  bitsll_Q_1_1_out1_1 <= Data_Type_Conversion3_out1_1 sll 1;

  BitSet2_out1_1 <= bitsll_Q_1_1_out1_1 OR to_signed(16#001#, 10);

  R_tmp2_sub_temp_3 <= resize(Data_Type_Conversion1_out1_5, 32) - resize(BitSet2_out1_1, 32);
  R_tmp2_out1_4 <= R_tmp2_sub_temp_3(9 DOWNTO 0);

  Bit_Slice_out1_6 <= R_tmp2_out1_4(9);

  Logical_Operator_out1_7 <=  NOT Bit_Slice_out1_6;

  
  if_tmp3_0_1_out1_5 <= Data_Type_Conversion1_out1_5 WHEN Logical_Operator_out1_7 = '0' ELSE
      R_tmp2_out1_4;

  Bit_Slice2_out1_5 <= unsigned(bitsll_R_1_out1_5(17 DOWNTO 0));

  Bit_Concat_out1_7 <= unsigned(if_tmp3_0_1_out1_5) & Bit_Slice2_out1_5;

  Data_Type_Conversion_out1_6 <= signed(Bit_Concat_out1_7);

  Delay5_PS8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_PS8_out1 <= to_signed(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_PS8_out1 <= Data_Type_Conversion_out1_6;
      END IF;
    END IF;
  END PROCESS Delay5_PS8_process;


  bitsll_R_1_out1_6 <= Delay5_PS8_out1 sll 1;

  Bit_Slice1_out1_6 <= unsigned(bitsll_R_1_out1_6(27 DOWNTO 17));

  Data_Type_Conversion1_out1_6 <= signed(Bit_Slice1_out1_6);

  BitSet1_out1_4 <= Data_Type_Conversion3_out1_1 OR to_signed(16#001#, 10);

  
  if_tmp3_0_out1_5 <= Data_Type_Conversion3_out1_1 WHEN Logical_Operator_out1_7 = '0' ELSE
      BitSet1_out1_4;

  Delay4_PS8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_PS8_out1 <= to_signed(16#000#, 10);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_PS8_out1 <= if_tmp3_0_out1_5;
      END IF;
    END IF;
  END PROCESS Delay4_PS8_process;


  Constant_out1_6 <= '0';

  Bit_Concat1_out1_6 <= unsigned(Delay4_PS8_out1) & Constant_out1_6;

  Data_Type_Conversion3_out1_2 <= signed(Bit_Concat1_out1_6);

  bitsll_Q_1_1_out1_2 <= Data_Type_Conversion3_out1_2 sll 1;

  BitSet2_out1_2 <= bitsll_Q_1_1_out1_2 OR to_signed(16#001#, 11);

  R_tmp2_sub_temp_4 <= resize(Data_Type_Conversion1_out1_6, 32) - resize(BitSet2_out1_2, 32);
  R_tmp2_out1_5 <= R_tmp2_sub_temp_4(10 DOWNTO 0);

  Bit_Slice_out1_7 <= R_tmp2_out1_5(10);

  Logical_Operator_out1_8 <=  NOT Bit_Slice_out1_7;

  
  if_tmp3_0_1_out1_6 <= Data_Type_Conversion1_out1_6 WHEN Logical_Operator_out1_8 = '0' ELSE
      R_tmp2_out1_5;

  Bit_Slice2_out1_6 <= unsigned(bitsll_R_1_out1_6(16 DOWNTO 0));

  Bit_Concat_out1_8 <= unsigned(if_tmp3_0_1_out1_6) & Bit_Slice2_out1_6;

  Data_Type_Conversion_out1_7 <= signed(Bit_Concat_out1_8);

  Delay_PS9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_PS9_out1 <= to_signed(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_PS9_out1 <= Data_Type_Conversion_out1_7;
      END IF;
    END IF;
  END PROCESS Delay_PS9_process;


  bitsll_R_1_out1_7 <= Delay_PS9_out1 sll 1;

  Bit_Slice1_out1_7 <= unsigned(bitsll_R_1_out1_7(27 DOWNTO 16));

  Data_Type_Conversion1_out1_7 <= signed(Bit_Slice1_out1_7);

  BitSet1_out1_5 <= Data_Type_Conversion3_out1_2 OR to_signed(16#001#, 11);

  
  if_tmp3_0_out1_6 <= Data_Type_Conversion3_out1_2 WHEN Logical_Operator_out1_8 = '0' ELSE
      BitSet1_out1_5;

  Delay1_PS9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_PS9_out1 <= to_signed(16#000#, 11);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_PS9_out1 <= if_tmp3_0_out1_6;
      END IF;
    END IF;
  END PROCESS Delay1_PS9_process;


  Constant_out1_7 <= '0';

  Bit_Concat1_out1_7 <= unsigned(Delay1_PS9_out1) & Constant_out1_7;

  Data_Type_Conversion3_out1_3 <= signed(Bit_Concat1_out1_7);

  bitsll_Q_1_1_out1_3 <= Data_Type_Conversion3_out1_3 sll 1;

  BitSet2_out1_3 <= bitsll_Q_1_1_out1_3 OR to_signed(16#001#, 12);

  R_tmp2_sub_temp_5 <= resize(Data_Type_Conversion1_out1_7, 32) - resize(BitSet2_out1_3, 32);
  R_tmp2_out1_6 <= R_tmp2_sub_temp_5(11 DOWNTO 0);

  Bit_Slice_out1_8 <= R_tmp2_out1_6(11);

  Logical_Operator_out1_9 <=  NOT Bit_Slice_out1_8;

  
  if_tmp3_0_1_out1_7 <= Data_Type_Conversion1_out1_7 WHEN Logical_Operator_out1_9 = '0' ELSE
      R_tmp2_out1_6;

  Bit_Slice2_out1_7 <= unsigned(bitsll_R_1_out1_7(15 DOWNTO 0));

  Bit_Concat_out1_9 <= unsigned(if_tmp3_0_1_out1_7) & Bit_Slice2_out1_7;

  Data_Type_Conversion_out1_8 <= signed(Bit_Concat_out1_9);

  Delay3_PS10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_PS10_out1 <= to_signed(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_PS10_out1 <= Data_Type_Conversion_out1_8;
      END IF;
    END IF;
  END PROCESS Delay3_PS10_process;


  bitsll_R_1_out1_8 <= Delay3_PS10_out1 sll 1;

  Bit_Slice1_out1_8 <= unsigned(bitsll_R_1_out1_8(27 DOWNTO 15));

  Data_Type_Conversion1_out1_8 <= signed(Bit_Slice1_out1_8);

  BitSet1_out1_6 <= Data_Type_Conversion3_out1_3 OR to_signed(16#001#, 12);

  
  if_tmp3_0_out1_7 <= Data_Type_Conversion3_out1_3 WHEN Logical_Operator_out1_9 = '0' ELSE
      BitSet1_out1_6;

  Delay2_PS10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_PS10_out1 <= to_signed(16#000#, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_PS10_out1 <= if_tmp3_0_out1_7;
      END IF;
    END IF;
  END PROCESS Delay2_PS10_process;


  Constant_out1_8 <= '0';

  Bit_Concat1_out1_8 <= unsigned(Delay2_PS10_out1) & Constant_out1_8;

  Data_Type_Conversion3_out1_4 <= signed(Bit_Concat1_out1_8);

  bitsll_Q_1_1_out1_4 <= Data_Type_Conversion3_out1_4 sll 1;

  BitSet2_out1_4 <= bitsll_Q_1_1_out1_4 OR to_signed(16#0001#, 13);

  R_tmp2_sub_temp_6 <= resize(Data_Type_Conversion1_out1_8, 32) - resize(BitSet2_out1_4, 32);
  R_tmp2_out1_7 <= R_tmp2_sub_temp_6(12 DOWNTO 0);

  Bit_Slice_out1_9 <= R_tmp2_out1_7(12);

  Logical_Operator_out1_10 <=  NOT Bit_Slice_out1_9;

  
  if_tmp3_0_1_out1_8 <= Data_Type_Conversion1_out1_8 WHEN Logical_Operator_out1_10 = '0' ELSE
      R_tmp2_out1_7;

  Bit_Slice2_out1_8 <= unsigned(bitsll_R_1_out1_8(14 DOWNTO 0));

  Bit_Concat_out1_10 <= unsigned(if_tmp3_0_1_out1_8) & Bit_Slice2_out1_8;

  Data_Type_Conversion_out1_9 <= signed(Bit_Concat_out1_10);

  Delay_PS11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_PS11_out1 <= to_signed(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_PS11_out1 <= Data_Type_Conversion_out1_9;
      END IF;
    END IF;
  END PROCESS Delay_PS11_process;


  bitsll_R_1_out1_9 <= Delay_PS11_out1 sll 1;

  Bit_Slice1_out1_9 <= unsigned(bitsll_R_1_out1_9(27 DOWNTO 14));

  Data_Type_Conversion1_out1_9 <= signed(Bit_Slice1_out1_9);

  BitSet1_out1_7 <= Data_Type_Conversion3_out1_4 OR to_signed(16#0001#, 13);

  
  if_tmp3_0_out1_8 <= Data_Type_Conversion3_out1_4 WHEN Logical_Operator_out1_10 = '0' ELSE
      BitSet1_out1_7;

  Delay1_PS11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_PS11_out1 <= to_signed(16#0000#, 13);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_PS11_out1 <= if_tmp3_0_out1_8;
      END IF;
    END IF;
  END PROCESS Delay1_PS11_process;


  Constant_out1_9 <= '0';

  Bit_Concat1_out1_9 <= unsigned(Delay1_PS11_out1) & Constant_out1_9;

  Data_Type_Conversion3_out1_5 <= signed(Bit_Concat1_out1_9);

  bitsll_Q_1_1_out1_5 <= Data_Type_Conversion3_out1_5 sll 1;

  BitSet2_out1_5 <= bitsll_Q_1_1_out1_5 OR to_signed(16#0001#, 14);

  R_tmp2_sub_temp_7 <= resize(Data_Type_Conversion1_out1_9, 32) - resize(BitSet2_out1_5, 32);
  R_tmp2_out1_8 <= R_tmp2_sub_temp_7(13 DOWNTO 0);

  Bit_Slice_out1_10 <= R_tmp2_out1_8(13);

  Logical_Operator_out1_11 <=  NOT Bit_Slice_out1_10;

  
  if_tmp3_0_1_out1_9 <= Data_Type_Conversion1_out1_9 WHEN Logical_Operator_out1_11 = '0' ELSE
      R_tmp2_out1_8;

  Bit_Slice2_out1_9 <= unsigned(bitsll_R_1_out1_9(13 DOWNTO 0));

  Bit_Concat_out1_11 <= unsigned(if_tmp3_0_1_out1_9) & Bit_Slice2_out1_9;

  Data_Type_Conversion_out1_10 <= signed(Bit_Concat_out1_11);

  Delay2_PS12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_PS12_out1 <= to_signed(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_PS12_out1 <= Data_Type_Conversion_out1_10;
      END IF;
    END IF;
  END PROCESS Delay2_PS12_process;


  bitsll_R_1_out1_10 <= Delay2_PS12_out1 sll 1;

  Bit_Slice1_out1_10 <= unsigned(bitsll_R_1_out1_10(27 DOWNTO 13));

  Data_Type_Conversion1_out1_10 <= signed(Bit_Slice1_out1_10);

  BitSet1_out1_8 <= Data_Type_Conversion3_out1_5 OR to_signed(16#0001#, 14);

  
  if_tmp3_0_out1_9 <= Data_Type_Conversion3_out1_5 WHEN Logical_Operator_out1_11 = '0' ELSE
      BitSet1_out1_8;

  Delay3_PS12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_PS12_out1 <= to_signed(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_PS12_out1 <= if_tmp3_0_out1_9;
      END IF;
    END IF;
  END PROCESS Delay3_PS12_process;


  Constant_out1_10 <= '0';

  Bit_Concat1_out1_10 <= unsigned(Delay3_PS12_out1) & Constant_out1_10;

  Data_Type_Conversion3_out1_6 <= signed(Bit_Concat1_out1_10);

  bitsll_Q_1_1_out1_6 <= Data_Type_Conversion3_out1_6 sll 1;

  BitSet2_out1_6 <= bitsll_Q_1_1_out1_6 OR to_signed(16#0001#, 15);

  R_tmp2_sub_temp_8 <= resize(Data_Type_Conversion1_out1_10, 32) - resize(BitSet2_out1_6, 32);
  R_tmp2_out1_9 <= R_tmp2_sub_temp_8(14 DOWNTO 0);

  Bit_Slice_out1_11 <= R_tmp2_out1_9(14);

  Logical_Operator_out1_12 <=  NOT Bit_Slice_out1_11;

  
  if_tmp3_0_1_out1_10 <= Data_Type_Conversion1_out1_10 WHEN Logical_Operator_out1_12 = '0' ELSE
      R_tmp2_out1_9;

  Bit_Slice2_out1_10 <= unsigned(bitsll_R_1_out1_10(12 DOWNTO 0));

  Bit_Concat_out1_12 <= unsigned(if_tmp3_0_1_out1_10) & Bit_Slice2_out1_10;

  Data_Type_Conversion_out1_11 <= signed(Bit_Concat_out1_12);

  Delay_PS13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_PS13_out1 <= to_signed(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_PS13_out1 <= Data_Type_Conversion_out1_11;
      END IF;
    END IF;
  END PROCESS Delay_PS13_process;


  bitsll_R_1_out1_11 <= Delay_PS13_out1 sll 1;

  Bit_Slice1_out1_11 <= unsigned(bitsll_R_1_out1_11(27 DOWNTO 12));

  Data_Type_Conversion1_out1_11 <= signed(Bit_Slice1_out1_11);

  BitSet1_out1_9 <= Data_Type_Conversion3_out1_6 OR to_signed(16#0001#, 15);

  
  if_tmp3_0_out1_10 <= Data_Type_Conversion3_out1_6 WHEN Logical_Operator_out1_12 = '0' ELSE
      BitSet1_out1_9;

  Delay1_PS13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_PS13_out1 <= to_signed(16#0000#, 15);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_PS13_out1 <= if_tmp3_0_out1_10;
      END IF;
    END IF;
  END PROCESS Delay1_PS13_process;


  Constant_out1_11 <= '0';

  Bit_Concat1_out1_11 <= unsigned(Delay1_PS13_out1) & Constant_out1_11;

  Data_Type_Conversion3_out1_7 <= signed(Bit_Concat1_out1_11);

  bitsll_Q_1_1_out1_7 <= Data_Type_Conversion3_out1_7 sll 1;

  BitSet2_out1_7 <= bitsll_Q_1_1_out1_7 OR to_signed(16#0001#, 16);

  R_tmp2_out1_10 <= Data_Type_Conversion1_out1_11 - BitSet2_out1_7;

  Bit_Slice_out1_12 <= R_tmp2_out1_10(15);

  Logical_Operator_out1_13 <=  NOT Bit_Slice_out1_12;

  
  if_tmp3_0_1_out1_11 <= Data_Type_Conversion1_out1_11 WHEN Logical_Operator_out1_13 = '0' ELSE
      R_tmp2_out1_10;

  Bit_Slice2_out1_11 <= unsigned(bitsll_R_1_out1_11(11 DOWNTO 0));

  Bit_Concat_out1_13 <= unsigned(if_tmp3_0_1_out1_11) & Bit_Slice2_out1_11;

  Data_Type_Conversion_out1_12 <= signed(Bit_Concat_out1_13);

  Delay4_PS14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_PS14_out1 <= to_signed(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_PS14_out1 <= Data_Type_Conversion_out1_12;
      END IF;
    END IF;
  END PROCESS Delay4_PS14_process;


  bitsll_R_1_out1_12 <= Delay4_PS14_out1 sll 1;

  Bit_Slice1_out1_12 <= unsigned(bitsll_R_1_out1_12(27 DOWNTO 11));

  Data_Type_Conversion1_out1_12 <= signed(Bit_Slice1_out1_12);

  BitSet1_out1_10 <= Data_Type_Conversion3_out1_7 OR to_signed(16#0001#, 16);

  
  if_tmp3_0_out1_11 <= Data_Type_Conversion3_out1_7 WHEN Logical_Operator_out1_13 = '0' ELSE
      BitSet1_out1_10;

  Delay5_PS14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_PS14_out1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_PS14_out1 <= if_tmp3_0_out1_11;
      END IF;
    END IF;
  END PROCESS Delay5_PS14_process;


  Constant_out1_12 <= '0';

  Bit_Concat1_out1_12 <= unsigned(Delay5_PS14_out1) & Constant_out1_12;

  Data_Type_Conversion3_out1_8 <= signed(Bit_Concat1_out1_12);

  bitsll_Q_1_1_out1_8 <= Data_Type_Conversion3_out1_8 sll 1;

  BitSet2_out1_8 <= bitsll_Q_1_1_out1_8 OR to_signed(16#00001#, 17);

  R_tmp2_sub_temp_9 <= resize(Data_Type_Conversion1_out1_12, 32) - resize(BitSet2_out1_8, 32);
  R_tmp2_out1_11 <= R_tmp2_sub_temp_9(16 DOWNTO 0);

  Bit_Slice_out1_13 <= R_tmp2_out1_11(16);

  Logical_Operator_out1_14 <=  NOT Bit_Slice_out1_13;

  
  if_tmp3_0_1_out1_12 <= Data_Type_Conversion1_out1_12 WHEN Logical_Operator_out1_14 = '0' ELSE
      R_tmp2_out1_11;

  Bit_Slice2_out1_12 <= unsigned(bitsll_R_1_out1_12(10 DOWNTO 0));

  Bit_Concat_out1_14 <= unsigned(if_tmp3_0_1_out1_12) & Bit_Slice2_out1_12;

  Data_Type_Conversion_out1_13 <= signed(Bit_Concat_out1_14);

  Delay2_PS15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_PS15_out1 <= to_signed(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_PS15_out1 <= Data_Type_Conversion_out1_13;
      END IF;
    END IF;
  END PROCESS Delay2_PS15_process;


  bitsll_R_1_out1_13 <= Delay2_PS15_out1 sll 1;

  Bit_Slice1_out1_13 <= unsigned(bitsll_R_1_out1_13(27 DOWNTO 10));

  Data_Type_Conversion1_out1_13 <= signed(Bit_Slice1_out1_13);

  BitSet1_out1_11 <= Data_Type_Conversion3_out1_8 OR to_signed(16#00001#, 17);

  
  if_tmp3_0_out1_12 <= Data_Type_Conversion3_out1_8 WHEN Logical_Operator_out1_14 = '0' ELSE
      BitSet1_out1_11;

  Delay3_PS15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_PS15_out1 <= to_signed(16#00000#, 17);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_PS15_out1 <= if_tmp3_0_out1_12;
      END IF;
    END IF;
  END PROCESS Delay3_PS15_process;


  Constant_out1_13 <= '0';

  Bit_Concat1_out1_13 <= unsigned(Delay3_PS15_out1) & Constant_out1_13;

  Data_Type_Conversion3_out1_9 <= signed(Bit_Concat1_out1_13);

  bitsll_Q_1_1_out1_9 <= Data_Type_Conversion3_out1_9 sll 1;

  BitSet2_out1_9 <= bitsll_Q_1_1_out1_9 OR to_signed(16#00001#, 18);

  R_tmp2_sub_temp_10 <= resize(Data_Type_Conversion1_out1_13, 32) - resize(BitSet2_out1_9, 32);
  R_tmp2_out1_12 <= R_tmp2_sub_temp_10(17 DOWNTO 0);

  Bit_Slice_out1_14 <= R_tmp2_out1_12(17);

  Logical_Operator_out1_15 <=  NOT Bit_Slice_out1_14;

  
  if_tmp3_0_1_out1_13 <= Data_Type_Conversion1_out1_13 WHEN Logical_Operator_out1_15 = '0' ELSE
      R_tmp2_out1_12;

  Bit_Slice2_out1_13 <= unsigned(bitsll_R_1_out1_13(9 DOWNTO 0));

  Bit_Concat_out1_15 <= unsigned(if_tmp3_0_1_out1_13) & Bit_Slice2_out1_13;

  Data_Type_Conversion_out1_14 <= signed(Bit_Concat_out1_15);

  Delay2_PS16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_PS16_out1 <= to_signed(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_PS16_out1 <= Data_Type_Conversion_out1_14;
      END IF;
    END IF;
  END PROCESS Delay2_PS16_process;


  bitsll_R_1_out1_14 <= Delay2_PS16_out1 sll 1;

  Bit_Slice1_out1_14 <= unsigned(bitsll_R_1_out1_14(27 DOWNTO 9));

  Data_Type_Conversion1_out1_14 <= signed(Bit_Slice1_out1_14);

  BitSet1_out1_12 <= Data_Type_Conversion3_out1_9 OR to_signed(16#00001#, 18);

  
  if_tmp3_0_out1_13 <= Data_Type_Conversion3_out1_9 WHEN Logical_Operator_out1_15 = '0' ELSE
      BitSet1_out1_12;

  Delay3_PS16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_PS16_out1 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_PS16_out1 <= if_tmp3_0_out1_13;
      END IF;
    END IF;
  END PROCESS Delay3_PS16_process;


  Constant_out1_14 <= '0';

  Bit_Concat1_out1_14 <= unsigned(Delay3_PS16_out1) & Constant_out1_14;

  Data_Type_Conversion3_out1_10 <= signed(Bit_Concat1_out1_14);

  bitsll_Q_1_1_out1_10 <= Data_Type_Conversion3_out1_10 sll 1;

  BitSet2_out1_10 <= bitsll_Q_1_1_out1_10 OR to_signed(16#00001#, 19);

  R_tmp2_sub_temp_11 <= resize(Data_Type_Conversion1_out1_14, 32) - resize(BitSet2_out1_10, 32);
  R_tmp2_out1_13 <= R_tmp2_sub_temp_11(18 DOWNTO 0);

  Bit_Slice_out1_15 <= R_tmp2_out1_13(18);

  Logical_Operator_out1_16 <=  NOT Bit_Slice_out1_15;

  
  if_tmp3_0_1_out1_14 <= Data_Type_Conversion1_out1_14 WHEN Logical_Operator_out1_16 = '0' ELSE
      R_tmp2_out1_13;

  Bit_Slice2_out1_14 <= unsigned(bitsll_R_1_out1_14(8 DOWNTO 0));

  Bit_Concat_out1_16 <= unsigned(if_tmp3_0_1_out1_14) & Bit_Slice2_out1_14;

  Data_Type_Conversion_out1_15 <= signed(Bit_Concat_out1_16);

  Delay_PS17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_PS17_out1 <= to_signed(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_PS17_out1 <= Data_Type_Conversion_out1_15;
      END IF;
    END IF;
  END PROCESS Delay_PS17_process;


  bitsll_R_1_out1_15 <= Delay_PS17_out1 sll 1;

  Bit_Slice1_out1_15 <= unsigned(bitsll_R_1_out1_15(27 DOWNTO 8));

  Data_Type_Conversion1_out1_15 <= signed(Bit_Slice1_out1_15);

  BitSet1_out1_13 <= Data_Type_Conversion3_out1_10 OR to_signed(16#00001#, 19);

  
  if_tmp3_0_out1_14 <= Data_Type_Conversion3_out1_10 WHEN Logical_Operator_out1_16 = '0' ELSE
      BitSet1_out1_13;

  Delay1_PS17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_PS17_out1 <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_PS17_out1 <= if_tmp3_0_out1_14;
      END IF;
    END IF;
  END PROCESS Delay1_PS17_process;


  Constant_out1_15 <= '0';

  Bit_Concat1_out1_15 <= unsigned(Delay1_PS17_out1) & Constant_out1_15;

  Data_Type_Conversion3_out1_11 <= signed(Bit_Concat1_out1_15);

  bitsll_Q_1_1_out1_11 <= Data_Type_Conversion3_out1_11 sll 1;

  BitSet2_out1_11 <= bitsll_Q_1_1_out1_11 OR to_signed(16#00001#, 20);

  R_tmp2_sub_temp_12 <= resize(Data_Type_Conversion1_out1_15, 32) - resize(BitSet2_out1_11, 32);
  R_tmp2_out1_14 <= R_tmp2_sub_temp_12(19 DOWNTO 0);

  Bit_Slice_out1_16 <= R_tmp2_out1_14(19);

  Logical_Operator_out1_17 <=  NOT Bit_Slice_out1_16;

  
  if_tmp3_0_1_out1_15 <= Data_Type_Conversion1_out1_15 WHEN Logical_Operator_out1_17 = '0' ELSE
      R_tmp2_out1_14;

  Bit_Slice2_out1_15 <= unsigned(bitsll_R_1_out1_15(7 DOWNTO 0));

  Bit_Concat_out1_17 <= unsigned(if_tmp3_0_1_out1_15) & Bit_Slice2_out1_15;

  Data_Type_Conversion_out1_16 <= signed(Bit_Concat_out1_17);

  Delay4_PS18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_PS18_out1 <= to_signed(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_PS18_out1 <= Data_Type_Conversion_out1_16;
      END IF;
    END IF;
  END PROCESS Delay4_PS18_process;


  bitsll_R_1_out1_16 <= Delay4_PS18_out1 sll 1;

  Bit_Slice1_out1_16 <= unsigned(bitsll_R_1_out1_16(27 DOWNTO 7));

  Data_Type_Conversion1_out1_16 <= signed(Bit_Slice1_out1_16);

  BitSet1_out1_14 <= Data_Type_Conversion3_out1_11 OR to_signed(16#00001#, 20);

  
  if_tmp3_0_out1_15 <= Data_Type_Conversion3_out1_11 WHEN Logical_Operator_out1_17 = '0' ELSE
      BitSet1_out1_14;

  Delay5_PS18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_PS18_out1 <= to_signed(16#00000#, 20);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_PS18_out1 <= if_tmp3_0_out1_15;
      END IF;
    END IF;
  END PROCESS Delay5_PS18_process;


  Constant_out1_16 <= '0';

  Bit_Concat1_out1_16 <= unsigned(Delay5_PS18_out1) & Constant_out1_16;

  Data_Type_Conversion3_out1_12 <= signed(Bit_Concat1_out1_16);

  bitsll_Q_1_1_out1_12 <= Data_Type_Conversion3_out1_12 sll 1;

  BitSet2_out1_12 <= bitsll_Q_1_1_out1_12 OR to_signed(16#000001#, 21);

  R_tmp2_sub_temp_13 <= resize(Data_Type_Conversion1_out1_16, 32) - resize(BitSet2_out1_12, 32);
  R_tmp2_out1_15 <= R_tmp2_sub_temp_13(20 DOWNTO 0);

  Bit_Slice_out1_17 <= R_tmp2_out1_15(20);

  Logical_Operator_out1_18 <=  NOT Bit_Slice_out1_17;

  
  if_tmp3_0_1_out1_16 <= Data_Type_Conversion1_out1_16 WHEN Logical_Operator_out1_18 = '0' ELSE
      R_tmp2_out1_15;

  Bit_Slice2_out1_16 <= unsigned(bitsll_R_1_out1_16(6 DOWNTO 0));

  Bit_Concat_out1_18 <= unsigned(if_tmp3_0_1_out1_16) & Bit_Slice2_out1_16;

  Data_Type_Conversion_out1_17 <= signed(Bit_Concat_out1_18);

  Delay4_PS19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_PS19_out1 <= to_signed(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_PS19_out1 <= Data_Type_Conversion_out1_17;
      END IF;
    END IF;
  END PROCESS Delay4_PS19_process;


  bitsll_R_1_out1_17 <= Delay4_PS19_out1 sll 1;

  Bit_Slice1_out1_17 <= unsigned(bitsll_R_1_out1_17(27 DOWNTO 6));

  Data_Type_Conversion1_out1_17 <= signed(Bit_Slice1_out1_17);

  BitSet1_out1_15 <= Data_Type_Conversion3_out1_12 OR to_signed(16#000001#, 21);

  
  if_tmp3_0_out1_16 <= Data_Type_Conversion3_out1_12 WHEN Logical_Operator_out1_18 = '0' ELSE
      BitSet1_out1_15;

  Delay5_PS19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_PS19_out1 <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_PS19_out1 <= if_tmp3_0_out1_16;
      END IF;
    END IF;
  END PROCESS Delay5_PS19_process;


  Constant_out1_17 <= '0';

  Bit_Concat1_out1_17 <= unsigned(Delay5_PS19_out1) & Constant_out1_17;

  Data_Type_Conversion3_out1_13 <= signed(Bit_Concat1_out1_17);

  bitsll_Q_1_1_out1_13 <= Data_Type_Conversion3_out1_13 sll 1;

  BitSet2_out1_13 <= bitsll_Q_1_1_out1_13 OR to_signed(16#000001#, 22);

  R_tmp2_sub_temp_14 <= resize(Data_Type_Conversion1_out1_17, 32) - resize(BitSet2_out1_13, 32);
  R_tmp2_out1_16 <= R_tmp2_sub_temp_14(21 DOWNTO 0);

  Bit_Slice_out1_18 <= R_tmp2_out1_16(21);

  Logical_Operator_out1_19 <=  NOT Bit_Slice_out1_18;

  
  if_tmp3_0_1_out1_17 <= Data_Type_Conversion1_out1_17 WHEN Logical_Operator_out1_19 = '0' ELSE
      R_tmp2_out1_16;

  Bit_Slice2_out1_17 <= unsigned(bitsll_R_1_out1_17(5 DOWNTO 0));

  Bit_Concat_out1_19 <= unsigned(if_tmp3_0_1_out1_17) & Bit_Slice2_out1_17;

  Data_Type_Conversion_out1_18 <= signed(Bit_Concat_out1_19);

  Delay2_PS20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_PS20_out1 <= to_signed(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_PS20_out1 <= Data_Type_Conversion_out1_18;
      END IF;
    END IF;
  END PROCESS Delay2_PS20_process;


  bitsll_R_1_out1_18 <= Delay2_PS20_out1 sll 1;

  Bit_Slice1_out1_18 <= unsigned(bitsll_R_1_out1_18(27 DOWNTO 5));

  Data_Type_Conversion1_out1_18 <= signed(Bit_Slice1_out1_18);

  BitSet1_out1_16 <= Data_Type_Conversion3_out1_13 OR to_signed(16#000001#, 22);

  
  if_tmp3_0_out1_17 <= Data_Type_Conversion3_out1_13 WHEN Logical_Operator_out1_19 = '0' ELSE
      BitSet1_out1_16;

  Delay3_PS20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_PS20_out1 <= to_signed(16#000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_PS20_out1 <= if_tmp3_0_out1_17;
      END IF;
    END IF;
  END PROCESS Delay3_PS20_process;


  Constant_out1_18 <= '0';

  Bit_Concat1_out1_18 <= unsigned(Delay3_PS20_out1) & Constant_out1_18;

  Data_Type_Conversion3_out1_14 <= signed(Bit_Concat1_out1_18);

  bitsll_Q_1_1_out1_14 <= Data_Type_Conversion3_out1_14 sll 1;

  BitSet2_out1_14 <= bitsll_Q_1_1_out1_14 OR to_signed(16#000001#, 23);

  R_tmp2_sub_temp_15 <= resize(Data_Type_Conversion1_out1_18, 32) - resize(BitSet2_out1_14, 32);
  R_tmp2_out1_17 <= R_tmp2_sub_temp_15(22 DOWNTO 0);

  Bit_Slice_out1_19 <= R_tmp2_out1_17(22);

  Logical_Operator_out1_20 <=  NOT Bit_Slice_out1_19;

  
  if_tmp3_0_1_out1_18 <= Data_Type_Conversion1_out1_18 WHEN Logical_Operator_out1_20 = '0' ELSE
      R_tmp2_out1_17;

  Bit_Slice2_out1_18 <= unsigned(bitsll_R_1_out1_18(4 DOWNTO 0));

  Bit_Concat_out1_20 <= unsigned(if_tmp3_0_1_out1_18) & Bit_Slice2_out1_18;

  Data_Type_Conversion_out1_19 <= signed(Bit_Concat_out1_20);

  Delay_PS21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_PS21_out1 <= to_signed(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_PS21_out1 <= Data_Type_Conversion_out1_19;
      END IF;
    END IF;
  END PROCESS Delay_PS21_process;


  bitsll_R_1_out1_19 <= Delay_PS21_out1 sll 1;

  Bit_Slice1_out1_19 <= unsigned(bitsll_R_1_out1_19(27 DOWNTO 4));

  Data_Type_Conversion1_out1_19 <= signed(Bit_Slice1_out1_19);

  BitSet1_out1_17 <= Data_Type_Conversion3_out1_14 OR to_signed(16#000001#, 23);

  
  if_tmp3_0_out1_18 <= Data_Type_Conversion3_out1_14 WHEN Logical_Operator_out1_20 = '0' ELSE
      BitSet1_out1_17;

  Delay1_PS21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_PS21_out1 <= to_signed(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_PS21_out1 <= if_tmp3_0_out1_18;
      END IF;
    END IF;
  END PROCESS Delay1_PS21_process;


  Constant_out1_19 <= '0';

  Bit_Concat1_out1_19 <= unsigned(Delay1_PS21_out1) & Constant_out1_19;

  Data_Type_Conversion3_out1_15 <= signed(Bit_Concat1_out1_19);

  bitsll_Q_1_1_out1_15 <= Data_Type_Conversion3_out1_15 sll 1;

  BitSet2_out1_15 <= bitsll_Q_1_1_out1_15 OR to_signed(16#000001#, 24);

  R_tmp2_sub_temp_16 <= resize(Data_Type_Conversion1_out1_19, 32) - resize(BitSet2_out1_15, 32);
  R_tmp2_out1_18 <= R_tmp2_sub_temp_16(23 DOWNTO 0);

  Bit_Slice_out1_20 <= R_tmp2_out1_18(23);

  Logical_Operator_out1_21 <=  NOT Bit_Slice_out1_20;

  
  if_tmp3_0_1_out1_19 <= Data_Type_Conversion1_out1_19 WHEN Logical_Operator_out1_21 = '0' ELSE
      R_tmp2_out1_18;

  Bit_Slice2_out1_19 <= unsigned(bitsll_R_1_out1_19(3 DOWNTO 0));

  Bit_Concat_out1_21 <= unsigned(if_tmp3_0_1_out1_19) & Bit_Slice2_out1_19;

  Data_Type_Conversion_out1_20 <= signed(Bit_Concat_out1_21);

  Delay4_PS22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_PS22_out1 <= to_signed(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_PS22_out1 <= Data_Type_Conversion_out1_20;
      END IF;
    END IF;
  END PROCESS Delay4_PS22_process;


  bitsll_R_1_out1_20 <= Delay4_PS22_out1 sll 1;

  Bit_Slice1_out1_20 <= unsigned(bitsll_R_1_out1_20(27 DOWNTO 3));

  Data_Type_Conversion1_out1_20 <= signed(Bit_Slice1_out1_20);

  BitSet1_out1_18 <= Data_Type_Conversion3_out1_15 OR to_signed(16#000001#, 24);

  
  if_tmp3_0_out1_19 <= Data_Type_Conversion3_out1_15 WHEN Logical_Operator_out1_21 = '0' ELSE
      BitSet1_out1_18;

  Delay5_PS22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_PS22_out1 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_PS22_out1 <= if_tmp3_0_out1_19;
      END IF;
    END IF;
  END PROCESS Delay5_PS22_process;


  Constant_out1_20 <= '0';

  Bit_Concat1_out1_20 <= unsigned(Delay5_PS22_out1) & Constant_out1_20;

  Data_Type_Conversion3_out1_16 <= signed(Bit_Concat1_out1_20);

  bitsll_Q_1_1_out1_16 <= Data_Type_Conversion3_out1_16 sll 1;

  BitSet2_out1_16 <= bitsll_Q_1_1_out1_16 OR to_signed(16#0000001#, 25);

  R_tmp2_sub_temp_17 <= resize(Data_Type_Conversion1_out1_20, 32) - resize(BitSet2_out1_16, 32);
  R_tmp2_out1_19 <= R_tmp2_sub_temp_17(24 DOWNTO 0);

  Bit_Slice_out1_21 <= R_tmp2_out1_19(24);

  Logical_Operator_out1_22 <=  NOT Bit_Slice_out1_21;

  
  if_tmp3_0_1_out1_20 <= Data_Type_Conversion1_out1_20 WHEN Logical_Operator_out1_22 = '0' ELSE
      R_tmp2_out1_19;

  Bit_Slice2_out1_20 <= unsigned(bitsll_R_1_out1_20(2 DOWNTO 0));

  Bit_Concat_out1_22 <= unsigned(if_tmp3_0_1_out1_20) & Bit_Slice2_out1_20;

  Data_Type_Conversion_out1_21 <= signed(Bit_Concat_out1_22);

  Delay6_PS23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay6_PS23_out1 <= to_signed(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay6_PS23_out1 <= Data_Type_Conversion_out1_21;
      END IF;
    END IF;
  END PROCESS Delay6_PS23_process;


  bitsll_R_1_out1_21 <= Delay6_PS23_out1 sll 1;

  Bit_Slice1_out1_21 <= unsigned(bitsll_R_1_out1_21(27 DOWNTO 2));

  Data_Type_Conversion1_out1_21 <= signed(Bit_Slice1_out1_21);

  BitSet1_out1_19 <= Data_Type_Conversion3_out1_16 OR to_signed(16#0000001#, 25);

  
  if_tmp3_0_out1_20 <= Data_Type_Conversion3_out1_16 WHEN Logical_Operator_out1_22 = '0' ELSE
      BitSet1_out1_19;

  Delay7_PS23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay7_PS23_out1 <= to_signed(16#0000000#, 25);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay7_PS23_out1 <= if_tmp3_0_out1_20;
      END IF;
    END IF;
  END PROCESS Delay7_PS23_process;


  Constant_out1_21 <= '0';

  Bit_Concat1_out1_21 <= unsigned(Delay7_PS23_out1) & Constant_out1_21;

  Data_Type_Conversion3_out1_17 <= signed(Bit_Concat1_out1_21);

  bitsll_Q_1_1_out1_17 <= Data_Type_Conversion3_out1_17 sll 1;

  BitSet2_out1_17 <= bitsll_Q_1_1_out1_17 OR to_signed(16#0000001#, 26);

  R_tmp2_sub_temp_18 <= resize(Data_Type_Conversion1_out1_21, 32) - resize(BitSet2_out1_17, 32);
  R_tmp2_out1_20 <= R_tmp2_sub_temp_18(25 DOWNTO 0);

  Bit_Slice_out1_22 <= R_tmp2_out1_20(25);

  Logical_Operator_out1_23 <=  NOT Bit_Slice_out1_22;

  
  if_tmp3_0_1_out1_21 <= Data_Type_Conversion1_out1_21 WHEN Logical_Operator_out1_23 = '0' ELSE
      R_tmp2_out1_20;

  Bit_Slice2_out1_21 <= unsigned(bitsll_R_1_out1_21(1 DOWNTO 0));

  Bit_Concat_out1_23 <= unsigned(if_tmp3_0_1_out1_21) & Bit_Slice2_out1_21;

  Data_Type_Conversion_out1_22 <= signed(Bit_Concat_out1_23);

  Delay2_PS24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_PS24_out1 <= to_signed(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_PS24_out1 <= Data_Type_Conversion_out1_22;
      END IF;
    END IF;
  END PROCESS Delay2_PS24_process;


  bitsll_R_1_out1_22 <= Delay2_PS24_out1 sll 1;

  Bit_Slice1_out1_22 <= unsigned(bitsll_R_1_out1_22(27 DOWNTO 1));

  Data_Type_Conversion1_out1_22 <= signed(Bit_Slice1_out1_22);

  BitSet1_out1_20 <= Data_Type_Conversion3_out1_17 OR to_signed(16#0000001#, 26);

  
  if_tmp3_0_out1_21 <= Data_Type_Conversion3_out1_17 WHEN Logical_Operator_out1_23 = '0' ELSE
      BitSet1_out1_20;

  Delay3_PS24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_PS24_out1 <= to_signed(16#0000000#, 26);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_PS24_out1 <= if_tmp3_0_out1_21;
      END IF;
    END IF;
  END PROCESS Delay3_PS24_process;


  Constant_out1_22 <= '0';

  Bit_Concat1_out1_22 <= unsigned(Delay3_PS24_out1) & Constant_out1_22;

  Data_Type_Conversion3_out1_18 <= signed(Bit_Concat1_out1_22);

  bitsll_Q_1_1_out1_18 <= Data_Type_Conversion3_out1_18 sll 1;

  BitSet2_out1_18 <= bitsll_Q_1_1_out1_18 OR to_signed(16#0000001#, 27);

  R_tmp2_sub_temp_19 <= resize(Data_Type_Conversion1_out1_22, 32) - resize(BitSet2_out1_18, 32);
  R_tmp2_out1_21 <= R_tmp2_sub_temp_19(26 DOWNTO 0);

  Bit_Slice_out1_23 <= R_tmp2_out1_21(26);

  
  if_tmp3_0_1_out1_22 <= R_tmp2_out1_21 WHEN Bit_Slice_out1_23 = '0' ELSE
      Data_Type_Conversion1_out1_22;

  Bit_Slice2_out1_22 <= bitsll_R_1_out1_22(0);

  Bit_Concat_out1_24 <= unsigned(if_tmp3_0_1_out1_22) & Bit_Slice2_out1_22;

  Data_Type_Conversion_out1_23 <= signed(Bit_Concat_out1_24);

  Delay_PS25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_PS25_out1 <= to_signed(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_PS25_out1 <= Data_Type_Conversion_out1_23;
      END IF;
    END IF;
  END PROCESS Delay_PS25_process;


  bitsll_R_1_out1_23 <= Delay_PS25_out1 sll 1;

  BitSet1_out1_21 <= Data_Type_Conversion3_out1_18 OR to_signed(16#0000001#, 27);

  
  if_tmp3_0_out1_22 <= BitSet1_out1_21 WHEN Bit_Slice_out1_23 = '0' ELSE
      Data_Type_Conversion3_out1_18;

  Delay1_PS25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_PS25_out1 <= to_signed(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_PS25_out1 <= if_tmp3_0_out1_22;
      END IF;
    END IF;
  END PROCESS Delay1_PS25_process;


  Constant_out1_23 <= '0';

  Bit_Concat1_out1_23 <= unsigned(Delay1_PS25_out1) & Constant_out1_23;

  Data_Type_Conversion3_out1_19 <= signed(Bit_Concat1_out1_23);

  bitsll_Q_1_out1_3 <= Data_Type_Conversion3_out1_19 sll 1;

  BitSet_out1_3 <= bitsll_Q_1_out1_3 OR to_signed(16#0000001#, 28);

  R_tmp2_sub_temp_20 <= resize(bitsll_R_1_out1_23, 32) - resize(BitSet_out1_3, 32);
  R_tmp2_out1_22 <= R_tmp2_sub_temp_20(27 DOWNTO 0);

  Bit_Slice_out1_24 <= R_tmp2_out1_22(27);

  Logical_Operator_out1_24 <=  NOT Bit_Slice_out1_24;

  BitSet1_out1_22 <= Data_Type_Conversion3_out1_19 OR to_signed(16#0000001#, 28);

  
  if_tmp3_0_out1_23 <= Data_Type_Conversion3_out1_19 WHEN Logical_Operator_out1_24 = '0' ELSE
      BitSet1_out1_22;

  BitSlice_out1_1 <= unsigned(if_tmp3_0_out1_23(23 DOWNTO 0));

  Delay9_PS26_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay9_PS26_out1 <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay9_PS26_out1 <= BitSlice_out1_1;
      END IF;
    END IF;
  END PROCESS Delay9_PS26_process;


  BitSlice1_out1 <= Delay9_PS26_out1(1);

  
  bitget_Mant_tmp_2_0_out1 <= '1' WHEN BitSlice1_out1 /= '0' ELSE
      '0';

  
  if_tmp3_0_1_out1_23 <= bitsll_R_1_out1_23 WHEN Logical_Operator_out1_24 = '0' ELSE
      R_tmp2_out1_22;

  
  R_0_out1 <= '1' WHEN if_tmp3_0_1_out1_23 /= to_signed(16#0000000#, 28) ELSE
      '0';

  BitSlice_out1_2 <= Delay9_PS26_out1(0);

  
  bitget_Mant_tmp_1_0_out1 <= '1' WHEN BitSlice_out1_2 /= '0' ELSE
      '0';

  Delay8_PS26_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay8_PS26_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay8_PS26_out1 <= R_0_out1;
      END IF;
    END IF;
  END PROCESS Delay8_PS26_process;


  alphabitget_Mant_tmp_2_0_out1 <= bitget_Mant_tmp_2_0_out1 OR Delay8_PS26_out1;

  alphabitget_Mant_tmp_1_0_out1 <= bitget_Mant_tmp_1_0_out1 AND alphabitget_Mant_tmp_2_0_out1;

  alpha0_out1_2 <= '0';

  Bit_Concat_out1_25 <= alpha0_out1_2 & Delay9_PS26_out1;

  alpha2_out1_1 <= to_unsigned(16#0000002#, 25);

  Mant_tmp_cast_2_like_Man_out1 <= resize(resize(Bit_Concat_out1_25, 32) + resize(alpha2_out1_1, 32), 25);

  
  if_bitget_Mant_tmp_1_0_out1 <= Bit_Concat_out1_25 WHEN alphabitget_Mant_tmp_1_0_out1 = '0' ELSE
      Mant_tmp_cast_2_like_Man_out1;

  Delay_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1_1 <= to_unsigned(16#0000000#, 25);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1_1 <= if_bitget_Mant_tmp_1_0_out1;
      END IF;
    END IF;
  END PROCESS Delay_1_process;


  BitSlice2_out1 <= Delay_out1_1(24);

  
  bitget_Mant_tmp_Mant_tmp_Word_out1 <= '1' WHEN BitSlice2_out1 /= '0' ELSE
      '0';

  C_out1_2 <= to_unsigned(16#7F#, 8);

  exp_a_cor_cfType_ExponentBia_out1 <= resize(resize(Delay3_out1_2, 32) + resize(C_out1_2, 32), 9);

  BitSlice1_out1_1 <= exp_a_cor_cfType_ExponentBia_out1(8 DOWNTO 1);

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1 <= BitSlice1_out1_1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Delay22_PS26_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay22_PS26_reg(0) <= to_unsigned(16#00#, 8);
      Delay22_PS26_reg(1) <= to_unsigned(16#00#, 8);
      Delay22_PS26_reg(2) <= to_unsigned(16#00#, 8);
      Delay22_PS26_reg(3) <= to_unsigned(16#00#, 8);
      Delay22_PS26_reg(4) <= to_unsigned(16#00#, 8);
      Delay22_PS26_reg(5) <= to_unsigned(16#00#, 8);
      Delay22_PS26_reg(6) <= to_unsigned(16#00#, 8);
      Delay22_PS26_reg(7) <= to_unsigned(16#00#, 8);
      Delay22_PS26_reg(8) <= to_unsigned(16#00#, 8);
      Delay22_PS26_reg(9) <= to_unsigned(16#00#, 8);
      Delay22_PS26_reg(10) <= to_unsigned(16#00#, 8);
      Delay22_PS26_reg(11) <= to_unsigned(16#00#, 8);
      Delay22_PS26_reg(12) <= to_unsigned(16#00#, 8);
      Delay22_PS26_reg(13) <= to_unsigned(16#00#, 8);
      Delay22_PS26_reg(14) <= to_unsigned(16#00#, 8);
      Delay22_PS26_reg(15) <= to_unsigned(16#00#, 8);
      Delay22_PS26_reg(16) <= to_unsigned(16#00#, 8);
      Delay22_PS26_reg(17) <= to_unsigned(16#00#, 8);
      Delay22_PS26_reg(18) <= to_unsigned(16#00#, 8);
      Delay22_PS26_reg(19) <= to_unsigned(16#00#, 8);
      Delay22_PS26_reg(20) <= to_unsigned(16#00#, 8);
      Delay22_PS26_reg(21) <= to_unsigned(16#00#, 8);
      Delay22_PS26_reg(22) <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay22_PS26_reg(0) <= Delay22_PS26_reg_next(0);
        Delay22_PS26_reg(1) <= Delay22_PS26_reg_next(1);
        Delay22_PS26_reg(2) <= Delay22_PS26_reg_next(2);
        Delay22_PS26_reg(3) <= Delay22_PS26_reg_next(3);
        Delay22_PS26_reg(4) <= Delay22_PS26_reg_next(4);
        Delay22_PS26_reg(5) <= Delay22_PS26_reg_next(5);
        Delay22_PS26_reg(6) <= Delay22_PS26_reg_next(6);
        Delay22_PS26_reg(7) <= Delay22_PS26_reg_next(7);
        Delay22_PS26_reg(8) <= Delay22_PS26_reg_next(8);
        Delay22_PS26_reg(9) <= Delay22_PS26_reg_next(9);
        Delay22_PS26_reg(10) <= Delay22_PS26_reg_next(10);
        Delay22_PS26_reg(11) <= Delay22_PS26_reg_next(11);
        Delay22_PS26_reg(12) <= Delay22_PS26_reg_next(12);
        Delay22_PS26_reg(13) <= Delay22_PS26_reg_next(13);
        Delay22_PS26_reg(14) <= Delay22_PS26_reg_next(14);
        Delay22_PS26_reg(15) <= Delay22_PS26_reg_next(15);
        Delay22_PS26_reg(16) <= Delay22_PS26_reg_next(16);
        Delay22_PS26_reg(17) <= Delay22_PS26_reg_next(17);
        Delay22_PS26_reg(18) <= Delay22_PS26_reg_next(18);
        Delay22_PS26_reg(19) <= Delay22_PS26_reg_next(19);
        Delay22_PS26_reg(20) <= Delay22_PS26_reg_next(20);
        Delay22_PS26_reg(21) <= Delay22_PS26_reg_next(21);
        Delay22_PS26_reg(22) <= Delay22_PS26_reg_next(22);
      END IF;
    END IF;
  END PROCESS Delay22_PS26_process;

  Delay22_PS26_out1 <= Delay22_PS26_reg(22);
  Delay22_PS26_reg_next(0) <= Delay1_out1;
  Delay22_PS26_reg_next(1) <= Delay22_PS26_reg(0);
  Delay22_PS26_reg_next(2) <= Delay22_PS26_reg(1);
  Delay22_PS26_reg_next(3) <= Delay22_PS26_reg(2);
  Delay22_PS26_reg_next(4) <= Delay22_PS26_reg(3);
  Delay22_PS26_reg_next(5) <= Delay22_PS26_reg(4);
  Delay22_PS26_reg_next(6) <= Delay22_PS26_reg(5);
  Delay22_PS26_reg_next(7) <= Delay22_PS26_reg(6);
  Delay22_PS26_reg_next(8) <= Delay22_PS26_reg(7);
  Delay22_PS26_reg_next(9) <= Delay22_PS26_reg(8);
  Delay22_PS26_reg_next(10) <= Delay22_PS26_reg(9);
  Delay22_PS26_reg_next(11) <= Delay22_PS26_reg(10);
  Delay22_PS26_reg_next(12) <= Delay22_PS26_reg(11);
  Delay22_PS26_reg_next(13) <= Delay22_PS26_reg(12);
  Delay22_PS26_reg_next(14) <= Delay22_PS26_reg(13);
  Delay22_PS26_reg_next(15) <= Delay22_PS26_reg(14);
  Delay22_PS26_reg_next(16) <= Delay22_PS26_reg(15);
  Delay22_PS26_reg_next(17) <= Delay22_PS26_reg(16);
  Delay22_PS26_reg_next(18) <= Delay22_PS26_reg(17);
  Delay22_PS26_reg_next(19) <= Delay22_PS26_reg(18);
  Delay22_PS26_reg_next(20) <= Delay22_PS26_reg(19);
  Delay22_PS26_reg_next(21) <= Delay22_PS26_reg(20);
  Delay22_PS26_reg_next(22) <= Delay22_PS26_reg(21);

  Delay2_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1_2 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_out1_2 <= Delay22_PS26_out1;
      END IF;
    END IF;
  END PROCESS Delay2_2_process;


  alpha1_out1_2 <= to_unsigned(16#01#, 8);

  Exp_1_out1 <= Delay22_PS26_out1 + alpha1_out1_2;

  Delay1_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1_1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1_1 <= Exp_1_out1;
      END IF;
    END IF;
  END PROCESS Delay1_1_process;


  
  if_bitget_Mant_tmp_Mant_tmp_Wor_out1 <= Delay2_out1_2 WHEN bitget_Mant_tmp_Mant_tmp_Word_out1 = '0' ELSE
      Delay1_out1_1;

  C_out1_3 <= to_unsigned(16#00#, 8);

  
  if_aExponent_0_aMantissa_out1 <= if_bitget_Mant_tmp_Mant_tmp_Wor_out1 WHEN Delay7_out1 = '0' ELSE
      C_out1_3;

  
  aSign_0_out1 <= '1' WHEN Delay3_out1 = '0' ELSE
      '0';

  
  aExponent_cfType_Exponent_I_out1_1 <= '1' WHEN Delay4_out1 = to_unsigned(16#FF#, 8) ELSE
      '0';

  alphaaSign_0_aExponent_out1 <= aSign_0_out1 AND aExponent_cfType_Exponent_I_out1_1;

  alphaaSign_0_aExponent_out1_1 <= alphaaSign_0_aExponent_out1 AND aMantissa_0_out1;

  Logical_Operator_out1_25 <= alphaaSign_0_aExponent_out1_1 OR alphaaSign_0_aExponent_1_out1;

  C_out1_4 <= to_unsigned(16#FF#, 8);

  
  if_aSign_0_aExponent_out1 <= C_out1_4 WHEN Logical_Operator_out1_25 = '0' ELSE
      Delay4_out1;

  Delay9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay9_reg(0) <= to_unsigned(16#00#, 8);
      Delay9_reg(1) <= to_unsigned(16#00#, 8);
      Delay9_reg(2) <= to_unsigned(16#00#, 8);
      Delay9_reg(3) <= to_unsigned(16#00#, 8);
      Delay9_reg(4) <= to_unsigned(16#00#, 8);
      Delay9_reg(5) <= to_unsigned(16#00#, 8);
      Delay9_reg(6) <= to_unsigned(16#00#, 8);
      Delay9_reg(7) <= to_unsigned(16#00#, 8);
      Delay9_reg(8) <= to_unsigned(16#00#, 8);
      Delay9_reg(9) <= to_unsigned(16#00#, 8);
      Delay9_reg(10) <= to_unsigned(16#00#, 8);
      Delay9_reg(11) <= to_unsigned(16#00#, 8);
      Delay9_reg(12) <= to_unsigned(16#00#, 8);
      Delay9_reg(13) <= to_unsigned(16#00#, 8);
      Delay9_reg(14) <= to_unsigned(16#00#, 8);
      Delay9_reg(15) <= to_unsigned(16#00#, 8);
      Delay9_reg(16) <= to_unsigned(16#00#, 8);
      Delay9_reg(17) <= to_unsigned(16#00#, 8);
      Delay9_reg(18) <= to_unsigned(16#00#, 8);
      Delay9_reg(19) <= to_unsigned(16#00#, 8);
      Delay9_reg(20) <= to_unsigned(16#00#, 8);
      Delay9_reg(21) <= to_unsigned(16#00#, 8);
      Delay9_reg(22) <= to_unsigned(16#00#, 8);
      Delay9_reg(23) <= to_unsigned(16#00#, 8);
      Delay9_reg(24) <= to_unsigned(16#00#, 8);
      Delay9_reg(25) <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay9_reg(0) <= Delay9_reg_next(0);
        Delay9_reg(1) <= Delay9_reg_next(1);
        Delay9_reg(2) <= Delay9_reg_next(2);
        Delay9_reg(3) <= Delay9_reg_next(3);
        Delay9_reg(4) <= Delay9_reg_next(4);
        Delay9_reg(5) <= Delay9_reg_next(5);
        Delay9_reg(6) <= Delay9_reg_next(6);
        Delay9_reg(7) <= Delay9_reg_next(7);
        Delay9_reg(8) <= Delay9_reg_next(8);
        Delay9_reg(9) <= Delay9_reg_next(9);
        Delay9_reg(10) <= Delay9_reg_next(10);
        Delay9_reg(11) <= Delay9_reg_next(11);
        Delay9_reg(12) <= Delay9_reg_next(12);
        Delay9_reg(13) <= Delay9_reg_next(13);
        Delay9_reg(14) <= Delay9_reg_next(14);
        Delay9_reg(15) <= Delay9_reg_next(15);
        Delay9_reg(16) <= Delay9_reg_next(16);
        Delay9_reg(17) <= Delay9_reg_next(17);
        Delay9_reg(18) <= Delay9_reg_next(18);
        Delay9_reg(19) <= Delay9_reg_next(19);
        Delay9_reg(20) <= Delay9_reg_next(20);
        Delay9_reg(21) <= Delay9_reg_next(21);
        Delay9_reg(22) <= Delay9_reg_next(22);
        Delay9_reg(23) <= Delay9_reg_next(23);
        Delay9_reg(24) <= Delay9_reg_next(24);
        Delay9_reg(25) <= Delay9_reg_next(25);
      END IF;
    END IF;
  END PROCESS Delay9_process;

  Delay9_out1 <= Delay9_reg(25);
  Delay9_reg_next(0) <= if_aSign_0_aExponent_out1;
  Delay9_reg_next(1) <= Delay9_reg(0);
  Delay9_reg_next(2) <= Delay9_reg(1);
  Delay9_reg_next(3) <= Delay9_reg(2);
  Delay9_reg_next(4) <= Delay9_reg(3);
  Delay9_reg_next(5) <= Delay9_reg(4);
  Delay9_reg_next(6) <= Delay9_reg(5);
  Delay9_reg_next(7) <= Delay9_reg(6);
  Delay9_reg_next(8) <= Delay9_reg(7);
  Delay9_reg_next(9) <= Delay9_reg(8);
  Delay9_reg_next(10) <= Delay9_reg(9);
  Delay9_reg_next(11) <= Delay9_reg(10);
  Delay9_reg_next(12) <= Delay9_reg(11);
  Delay9_reg_next(13) <= Delay9_reg(12);
  Delay9_reg_next(14) <= Delay9_reg(13);
  Delay9_reg_next(15) <= Delay9_reg(14);
  Delay9_reg_next(16) <= Delay9_reg(15);
  Delay9_reg_next(17) <= Delay9_reg(16);
  Delay9_reg_next(18) <= Delay9_reg(17);
  Delay9_reg_next(19) <= Delay9_reg(18);
  Delay9_reg_next(20) <= Delay9_reg(19);
  Delay9_reg_next(21) <= Delay9_reg(20);
  Delay9_reg_next(22) <= Delay9_reg(21);
  Delay9_reg_next(23) <= Delay9_reg(22);
  Delay9_reg_next(24) <= Delay9_reg(23);
  Delay9_reg_next(25) <= Delay9_reg(24);

  
  if_aSign_1_aExponent_out1 <= if_aExponent_0_aMantissa_out1 WHEN Delay6_out1 = '0' ELSE
      Delay9_out1;

  
  Switch6_out1 <= Constant1_out1 WHEN Relational_Operator_relop1 = '0' ELSE
      if_aSign_1_aExponent_out1;

  Delay1_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1_2 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1_2 <= Switch6_out1;
      END IF;
    END IF;
  END PROCESS Delay1_2_process;


  Constant_out1_24 <= to_unsigned(16#000000#, 23);

  BitSlice3_out1 <= Delay_out1_1(23 DOWNTO 1);

  C_out1_5 <= to_unsigned(16#000000#, 23);

  
  if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 <= BitSlice3_out1 WHEN bitget_Mant_tmp_Mant_tmp_Word_out1 = '0' ELSE
      C_out1_5;

  C1_out1 <= to_unsigned(16#000000#, 23);

  
  if_aExponent_0_aMantissa_1_out1 <= if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 WHEN Delay7_out1 = '0' ELSE
      C1_out1;

  C1_out1_1 <= to_unsigned(16#400000#, 23);

  
  if_aSign_0_aExponent_1_out1 <= C1_out1_1 WHEN Logical_Operator_out1_25 = '0' ELSE
      Delay5_out1;

  Delay8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay8_reg(0) <= to_unsigned(16#000000#, 23);
      Delay8_reg(1) <= to_unsigned(16#000000#, 23);
      Delay8_reg(2) <= to_unsigned(16#000000#, 23);
      Delay8_reg(3) <= to_unsigned(16#000000#, 23);
      Delay8_reg(4) <= to_unsigned(16#000000#, 23);
      Delay8_reg(5) <= to_unsigned(16#000000#, 23);
      Delay8_reg(6) <= to_unsigned(16#000000#, 23);
      Delay8_reg(7) <= to_unsigned(16#000000#, 23);
      Delay8_reg(8) <= to_unsigned(16#000000#, 23);
      Delay8_reg(9) <= to_unsigned(16#000000#, 23);
      Delay8_reg(10) <= to_unsigned(16#000000#, 23);
      Delay8_reg(11) <= to_unsigned(16#000000#, 23);
      Delay8_reg(12) <= to_unsigned(16#000000#, 23);
      Delay8_reg(13) <= to_unsigned(16#000000#, 23);
      Delay8_reg(14) <= to_unsigned(16#000000#, 23);
      Delay8_reg(15) <= to_unsigned(16#000000#, 23);
      Delay8_reg(16) <= to_unsigned(16#000000#, 23);
      Delay8_reg(17) <= to_unsigned(16#000000#, 23);
      Delay8_reg(18) <= to_unsigned(16#000000#, 23);
      Delay8_reg(19) <= to_unsigned(16#000000#, 23);
      Delay8_reg(20) <= to_unsigned(16#000000#, 23);
      Delay8_reg(21) <= to_unsigned(16#000000#, 23);
      Delay8_reg(22) <= to_unsigned(16#000000#, 23);
      Delay8_reg(23) <= to_unsigned(16#000000#, 23);
      Delay8_reg(24) <= to_unsigned(16#000000#, 23);
      Delay8_reg(25) <= to_unsigned(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay8_reg(0) <= Delay8_reg_next(0);
        Delay8_reg(1) <= Delay8_reg_next(1);
        Delay8_reg(2) <= Delay8_reg_next(2);
        Delay8_reg(3) <= Delay8_reg_next(3);
        Delay8_reg(4) <= Delay8_reg_next(4);
        Delay8_reg(5) <= Delay8_reg_next(5);
        Delay8_reg(6) <= Delay8_reg_next(6);
        Delay8_reg(7) <= Delay8_reg_next(7);
        Delay8_reg(8) <= Delay8_reg_next(8);
        Delay8_reg(9) <= Delay8_reg_next(9);
        Delay8_reg(10) <= Delay8_reg_next(10);
        Delay8_reg(11) <= Delay8_reg_next(11);
        Delay8_reg(12) <= Delay8_reg_next(12);
        Delay8_reg(13) <= Delay8_reg_next(13);
        Delay8_reg(14) <= Delay8_reg_next(14);
        Delay8_reg(15) <= Delay8_reg_next(15);
        Delay8_reg(16) <= Delay8_reg_next(16);
        Delay8_reg(17) <= Delay8_reg_next(17);
        Delay8_reg(18) <= Delay8_reg_next(18);
        Delay8_reg(19) <= Delay8_reg_next(19);
        Delay8_reg(20) <= Delay8_reg_next(20);
        Delay8_reg(21) <= Delay8_reg_next(21);
        Delay8_reg(22) <= Delay8_reg_next(22);
        Delay8_reg(23) <= Delay8_reg_next(23);
        Delay8_reg(24) <= Delay8_reg_next(24);
        Delay8_reg(25) <= Delay8_reg_next(25);
      END IF;
    END IF;
  END PROCESS Delay8_process;

  Delay8_out1 <= Delay8_reg(25);
  Delay8_reg_next(0) <= if_aSign_0_aExponent_1_out1;
  Delay8_reg_next(1) <= Delay8_reg(0);
  Delay8_reg_next(2) <= Delay8_reg(1);
  Delay8_reg_next(3) <= Delay8_reg(2);
  Delay8_reg_next(4) <= Delay8_reg(3);
  Delay8_reg_next(5) <= Delay8_reg(4);
  Delay8_reg_next(6) <= Delay8_reg(5);
  Delay8_reg_next(7) <= Delay8_reg(6);
  Delay8_reg_next(8) <= Delay8_reg(7);
  Delay8_reg_next(9) <= Delay8_reg(8);
  Delay8_reg_next(10) <= Delay8_reg(9);
  Delay8_reg_next(11) <= Delay8_reg(10);
  Delay8_reg_next(12) <= Delay8_reg(11);
  Delay8_reg_next(13) <= Delay8_reg(12);
  Delay8_reg_next(14) <= Delay8_reg(13);
  Delay8_reg_next(15) <= Delay8_reg(14);
  Delay8_reg_next(16) <= Delay8_reg(15);
  Delay8_reg_next(17) <= Delay8_reg(16);
  Delay8_reg_next(18) <= Delay8_reg(17);
  Delay8_reg_next(19) <= Delay8_reg(18);
  Delay8_reg_next(20) <= Delay8_reg(19);
  Delay8_reg_next(21) <= Delay8_reg(20);
  Delay8_reg_next(22) <= Delay8_reg(21);
  Delay8_reg_next(23) <= Delay8_reg(22);
  Delay8_reg_next(24) <= Delay8_reg(23);
  Delay8_reg_next(25) <= Delay8_reg(24);

  
  if_aSign_1_aExponent_1_out1 <= if_aExponent_0_aMantissa_1_out1 WHEN Delay6_out1 = '0' ELSE
      Delay8_out1;

  
  Switch5_out1 <= Constant_out1_24 WHEN Relational_Operator_relop1 = '0' ELSE
      if_aSign_1_aExponent_1_out1;

  Delay_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1_2 <= to_unsigned(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1_2 <= Switch5_out1;
      END IF;
    END IF;
  END PROCESS Delay_2_process;


  -- Combine FP sign, exponent, mantissa into 32 bit word
  nfp_out_pack <= Delay2_out1 & Delay1_out1_2 & Delay_out1_2;

  nfp_out <= std_logic_vector(nfp_out_pack);

END rtl;

