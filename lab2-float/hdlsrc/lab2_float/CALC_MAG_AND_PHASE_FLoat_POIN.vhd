-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\lab2_float\CALC_MAG_AND_PHASE_FLoat_POIN.vhd
-- Created: 2023-01-11 20:53:44
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1
-- Target subsystem base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- o_valid                       ce_out        1
-- o_magnitude                   ce_out        1
-- o_phase                       ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: CALC_MAG_AND_PHASE_FLoat_POIN
-- Source Path: lab2_float/CALC_MAG_AND_PHASE_FLoat_POIN
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.CALC_MAG_AND_PHASE_FLoat_POIN_pkg.ALL;

ENTITY CALC_MAG_AND_PHASE_FLoat_POIN IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        in_valid                          :   IN    std_logic;
        i_complex_vallue_re               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        i_complex_vallue_im               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        ce_out                            :   OUT   std_logic;
        o_valid                           :   OUT   std_logic;
        o_magnitude                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        o_phase                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END CALC_MAG_AND_PHASE_FLoat_POIN;


ARCHITECTURE rtl OF CALC_MAG_AND_PHASE_FLoat_POIN IS

  -- Component Declarations
  COMPONENT nfp_mul_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT nfp_add_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT nfp_sqrt_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT nfp_atan2_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : nfp_mul_single
    USE ENTITY work.nfp_mul_single(rtl);

  FOR ALL : nfp_add_single
    USE ENTITY work.nfp_add_single(rtl);

  FOR ALL : nfp_sqrt_single
    USE ENTITY work.nfp_sqrt_single(rtl);

  FOR ALL : nfp_atan2_single
    USE ENTITY work.nfp_atan2_single(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 46);  -- ufix1 [47]
  SIGNAL delayMatch_reg_next              : std_logic_vector(0 TO 46);  -- ufix1 [47]
  SIGNAL in_valid_1                       : std_logic;
  SIGNAL Product1_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add1_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sqrt_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Atan2_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch1_reg                  : vector_of_std_logic_vector32(0 TO 4);  -- ufix32 [5]
  SIGNAL delayMatch1_reg_next             : vector_of_std_logic_vector32(0 TO 4);  -- ufix32 [5]
  SIGNAL Atan2_out1_1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  u_nfp_mul_comp : nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => i_complex_vallue_re,  -- single
              nfp_in2 => i_complex_vallue_re,  -- single
              nfp_out => Product1_out1  -- single
              );

  u_nfp_mul_comp_1 : nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => i_complex_vallue_im,  -- single
              nfp_in2 => i_complex_vallue_im,  -- single
              nfp_out => Product_out1  -- single
              );

  u_nfp_add_comp : nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Product1_out1,  -- single
              nfp_in2 => Product_out1,  -- single
              nfp_out => Add1_out1  -- single
              );

  u_nfp_sqrt_comp : nfp_sqrt_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Add1_out1,  -- single
              nfp_out => Sqrt_out1  -- single
              );

  u_nfp_atan2_comp : nfp_atan2_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => i_complex_vallue_im,  -- single
              nfp_in2 => i_complex_vallue_re,  -- single
              nfp_out => Atan2_out1  -- single
              );

  enb <= clk_enable;

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg(0) <= '0';
      delayMatch_reg(1) <= '0';
      delayMatch_reg(2) <= '0';
      delayMatch_reg(3) <= '0';
      delayMatch_reg(4) <= '0';
      delayMatch_reg(5) <= '0';
      delayMatch_reg(6) <= '0';
      delayMatch_reg(7) <= '0';
      delayMatch_reg(8) <= '0';
      delayMatch_reg(9) <= '0';
      delayMatch_reg(10) <= '0';
      delayMatch_reg(11) <= '0';
      delayMatch_reg(12) <= '0';
      delayMatch_reg(13) <= '0';
      delayMatch_reg(14) <= '0';
      delayMatch_reg(15) <= '0';
      delayMatch_reg(16) <= '0';
      delayMatch_reg(17) <= '0';
      delayMatch_reg(18) <= '0';
      delayMatch_reg(19) <= '0';
      delayMatch_reg(20) <= '0';
      delayMatch_reg(21) <= '0';
      delayMatch_reg(22) <= '0';
      delayMatch_reg(23) <= '0';
      delayMatch_reg(24) <= '0';
      delayMatch_reg(25) <= '0';
      delayMatch_reg(26) <= '0';
      delayMatch_reg(27) <= '0';
      delayMatch_reg(28) <= '0';
      delayMatch_reg(29) <= '0';
      delayMatch_reg(30) <= '0';
      delayMatch_reg(31) <= '0';
      delayMatch_reg(32) <= '0';
      delayMatch_reg(33) <= '0';
      delayMatch_reg(34) <= '0';
      delayMatch_reg(35) <= '0';
      delayMatch_reg(36) <= '0';
      delayMatch_reg(37) <= '0';
      delayMatch_reg(38) <= '0';
      delayMatch_reg(39) <= '0';
      delayMatch_reg(40) <= '0';
      delayMatch_reg(41) <= '0';
      delayMatch_reg(42) <= '0';
      delayMatch_reg(43) <= '0';
      delayMatch_reg(44) <= '0';
      delayMatch_reg(45) <= '0';
      delayMatch_reg(46) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg(0) <= delayMatch_reg_next(0);
        delayMatch_reg(1) <= delayMatch_reg_next(1);
        delayMatch_reg(2) <= delayMatch_reg_next(2);
        delayMatch_reg(3) <= delayMatch_reg_next(3);
        delayMatch_reg(4) <= delayMatch_reg_next(4);
        delayMatch_reg(5) <= delayMatch_reg_next(5);
        delayMatch_reg(6) <= delayMatch_reg_next(6);
        delayMatch_reg(7) <= delayMatch_reg_next(7);
        delayMatch_reg(8) <= delayMatch_reg_next(8);
        delayMatch_reg(9) <= delayMatch_reg_next(9);
        delayMatch_reg(10) <= delayMatch_reg_next(10);
        delayMatch_reg(11) <= delayMatch_reg_next(11);
        delayMatch_reg(12) <= delayMatch_reg_next(12);
        delayMatch_reg(13) <= delayMatch_reg_next(13);
        delayMatch_reg(14) <= delayMatch_reg_next(14);
        delayMatch_reg(15) <= delayMatch_reg_next(15);
        delayMatch_reg(16) <= delayMatch_reg_next(16);
        delayMatch_reg(17) <= delayMatch_reg_next(17);
        delayMatch_reg(18) <= delayMatch_reg_next(18);
        delayMatch_reg(19) <= delayMatch_reg_next(19);
        delayMatch_reg(20) <= delayMatch_reg_next(20);
        delayMatch_reg(21) <= delayMatch_reg_next(21);
        delayMatch_reg(22) <= delayMatch_reg_next(22);
        delayMatch_reg(23) <= delayMatch_reg_next(23);
        delayMatch_reg(24) <= delayMatch_reg_next(24);
        delayMatch_reg(25) <= delayMatch_reg_next(25);
        delayMatch_reg(26) <= delayMatch_reg_next(26);
        delayMatch_reg(27) <= delayMatch_reg_next(27);
        delayMatch_reg(28) <= delayMatch_reg_next(28);
        delayMatch_reg(29) <= delayMatch_reg_next(29);
        delayMatch_reg(30) <= delayMatch_reg_next(30);
        delayMatch_reg(31) <= delayMatch_reg_next(31);
        delayMatch_reg(32) <= delayMatch_reg_next(32);
        delayMatch_reg(33) <= delayMatch_reg_next(33);
        delayMatch_reg(34) <= delayMatch_reg_next(34);
        delayMatch_reg(35) <= delayMatch_reg_next(35);
        delayMatch_reg(36) <= delayMatch_reg_next(36);
        delayMatch_reg(37) <= delayMatch_reg_next(37);
        delayMatch_reg(38) <= delayMatch_reg_next(38);
        delayMatch_reg(39) <= delayMatch_reg_next(39);
        delayMatch_reg(40) <= delayMatch_reg_next(40);
        delayMatch_reg(41) <= delayMatch_reg_next(41);
        delayMatch_reg(42) <= delayMatch_reg_next(42);
        delayMatch_reg(43) <= delayMatch_reg_next(43);
        delayMatch_reg(44) <= delayMatch_reg_next(44);
        delayMatch_reg(45) <= delayMatch_reg_next(45);
        delayMatch_reg(46) <= delayMatch_reg_next(46);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  in_valid_1 <= delayMatch_reg(46);
  delayMatch_reg_next(0) <= in_valid;
  delayMatch_reg_next(1) <= delayMatch_reg(0);
  delayMatch_reg_next(2) <= delayMatch_reg(1);
  delayMatch_reg_next(3) <= delayMatch_reg(2);
  delayMatch_reg_next(4) <= delayMatch_reg(3);
  delayMatch_reg_next(5) <= delayMatch_reg(4);
  delayMatch_reg_next(6) <= delayMatch_reg(5);
  delayMatch_reg_next(7) <= delayMatch_reg(6);
  delayMatch_reg_next(8) <= delayMatch_reg(7);
  delayMatch_reg_next(9) <= delayMatch_reg(8);
  delayMatch_reg_next(10) <= delayMatch_reg(9);
  delayMatch_reg_next(11) <= delayMatch_reg(10);
  delayMatch_reg_next(12) <= delayMatch_reg(11);
  delayMatch_reg_next(13) <= delayMatch_reg(12);
  delayMatch_reg_next(14) <= delayMatch_reg(13);
  delayMatch_reg_next(15) <= delayMatch_reg(14);
  delayMatch_reg_next(16) <= delayMatch_reg(15);
  delayMatch_reg_next(17) <= delayMatch_reg(16);
  delayMatch_reg_next(18) <= delayMatch_reg(17);
  delayMatch_reg_next(19) <= delayMatch_reg(18);
  delayMatch_reg_next(20) <= delayMatch_reg(19);
  delayMatch_reg_next(21) <= delayMatch_reg(20);
  delayMatch_reg_next(22) <= delayMatch_reg(21);
  delayMatch_reg_next(23) <= delayMatch_reg(22);
  delayMatch_reg_next(24) <= delayMatch_reg(23);
  delayMatch_reg_next(25) <= delayMatch_reg(24);
  delayMatch_reg_next(26) <= delayMatch_reg(25);
  delayMatch_reg_next(27) <= delayMatch_reg(26);
  delayMatch_reg_next(28) <= delayMatch_reg(27);
  delayMatch_reg_next(29) <= delayMatch_reg(28);
  delayMatch_reg_next(30) <= delayMatch_reg(29);
  delayMatch_reg_next(31) <= delayMatch_reg(30);
  delayMatch_reg_next(32) <= delayMatch_reg(31);
  delayMatch_reg_next(33) <= delayMatch_reg(32);
  delayMatch_reg_next(34) <= delayMatch_reg(33);
  delayMatch_reg_next(35) <= delayMatch_reg(34);
  delayMatch_reg_next(36) <= delayMatch_reg(35);
  delayMatch_reg_next(37) <= delayMatch_reg(36);
  delayMatch_reg_next(38) <= delayMatch_reg(37);
  delayMatch_reg_next(39) <= delayMatch_reg(38);
  delayMatch_reg_next(40) <= delayMatch_reg(39);
  delayMatch_reg_next(41) <= delayMatch_reg(40);
  delayMatch_reg_next(42) <= delayMatch_reg(41);
  delayMatch_reg_next(43) <= delayMatch_reg(42);
  delayMatch_reg_next(44) <= delayMatch_reg(43);
  delayMatch_reg_next(45) <= delayMatch_reg(44);
  delayMatch_reg_next(46) <= delayMatch_reg(45);

  o_valid <= in_valid_1;

  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch1_reg(0) <= X"00000000";
      delayMatch1_reg(1) <= X"00000000";
      delayMatch1_reg(2) <= X"00000000";
      delayMatch1_reg(3) <= X"00000000";
      delayMatch1_reg(4) <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch1_reg(0) <= delayMatch1_reg_next(0);
        delayMatch1_reg(1) <= delayMatch1_reg_next(1);
        delayMatch1_reg(2) <= delayMatch1_reg_next(2);
        delayMatch1_reg(3) <= delayMatch1_reg_next(3);
        delayMatch1_reg(4) <= delayMatch1_reg_next(4);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  Atan2_out1_1 <= delayMatch1_reg(4);
  delayMatch1_reg_next(0) <= Atan2_out1;
  delayMatch1_reg_next(1) <= delayMatch1_reg(0);
  delayMatch1_reg_next(2) <= delayMatch1_reg(1);
  delayMatch1_reg_next(3) <= delayMatch1_reg(2);
  delayMatch1_reg_next(4) <= delayMatch1_reg(3);

  ce_out <= clk_enable;

  o_magnitude <= Sqrt_out1;

  o_phase <= Atan2_out1_1;

END rtl;

