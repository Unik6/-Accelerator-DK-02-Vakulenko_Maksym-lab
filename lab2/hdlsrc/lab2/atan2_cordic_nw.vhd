-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\lab2\atan2_cordic_nw.vhd
-- Created: 2023-01-11 03:13:15
-- 
-- Generated by MATLAB 9.12 and HDL Coder 3.20
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: atan2_cordic_nw
-- Source Path: lab2/CALC_MAG_AND_PHASE_FIX_POIN/atan2_cordic_nw
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY atan2_cordic_nw IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        y_in                              :   IN    std_logic_vector(32 DOWNTO 0);  -- sfix33_En16
        x_in                              :   IN    std_logic_vector(32 DOWNTO 0);  -- sfix33_En16
        angle                             :   OUT   std_logic_vector(32 DOWNTO 0)  -- sfix33_En30
        );
END atan2_cordic_nw;


ARCHITECTURE rtl OF atan2_cordic_nw IS

  -- Signals
  SIGNAL y_in_signed                      : signed(32 DOWNTO 0);  -- sfix33_En16
  SIGNAL y_in_ext                         : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y_in_reg_out_1                   : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y_in_msb                         : std_logic;  -- ufix1
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL comp_zero                        : std_logic;  -- ufix1
  SIGNAL y_non_zero                       : std_logic;  -- ufix1
  SIGNAL y_non_zero_reg_reg               : std_logic_vector(0 TO 11);  -- ufix1 [12]
  SIGNAL y_non_zero_p                     : std_logic;  -- ufix1
  SIGNAL x_in_signed                      : signed(32 DOWNTO 0);  -- sfix33_En16
  SIGNAL x_in_ext                         : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x_in_reg_out_1                   : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x_in_msb                         : std_logic;  -- ufix1
  SIGNAL x_quad_adjust_reg_reg            : std_logic_vector(0 TO 11);  -- ufix1 [12]
  SIGNAL x_quad_adjust_p                  : std_logic;  -- ufix1
  SIGNAL y_quad_adjust_reg_reg            : std_logic_vector(0 TO 11);  -- ufix1 [12]
  SIGNAL y_quad_adjust_p                  : std_logic;  -- ufix1
  SIGNAL x_y_adjust                       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL zero                             : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL onePi_1                          : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL y_in_reg_neg_cast                : signed(35 DOWNTO 0);  -- sfix36_En16
  SIGNAL y_in_reg_neg_cast_1              : signed(35 DOWNTO 0);  -- sfix36_En16
  SIGNAL y_in_reg_neg_1                   : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y_pre_quadcorr_out               : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y0_p                             : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y0_p_msb                         : std_logic;  -- ufix1
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL x_in_reg_neg_cast                : signed(35 DOWNTO 0);  -- sfix36_En16
  SIGNAL x_in_reg_neg_cast_1              : signed(35 DOWNTO 0);  -- sfix36_En16
  SIGNAL x_in_reg_neg_1                   : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x_pre_quadcorr_out               : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x0_p                             : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y_temp1                          : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y_temp_0_1_1                     : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y1                               : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y1_p                             : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y1_p_msb                         : std_logic;  -- ufix1
  SIGNAL switch_compare_1_4               : std_logic;
  SIGNAL switch_compare_1_5               : std_logic;
  SIGNAL x_temp1                          : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x_temp_0_1_1                     : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x1                               : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x1_p                             : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x_shift2                         : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y_temp2                          : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y_temp_0_2_1                     : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y2                               : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y2_p                             : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y2_p_msb                         : std_logic;  -- ufix1
  SIGNAL switch_compare_1_6               : std_logic;
  SIGNAL switch_compare_1_7               : std_logic;
  SIGNAL y_shift2                         : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x_temp2                          : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x_temp_0_2_1                     : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x2                               : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x2_p                             : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x_shift3                         : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y_temp3                          : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y_temp_0_3_1                     : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y3                               : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y3_p                             : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y3_p_msb                         : std_logic;  -- ufix1
  SIGNAL switch_compare_1_8               : std_logic;
  SIGNAL switch_compare_1_9               : std_logic;
  SIGNAL y_shift3                         : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x_temp3                          : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x_temp_0_3_1                     : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x3                               : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x3_p                             : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x_shift4                         : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y_temp4                          : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y_temp_0_4_1                     : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y4                               : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y4_p                             : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y4_p_msb                         : std_logic;  -- ufix1
  SIGNAL switch_compare_1_10              : std_logic;
  SIGNAL switch_compare_1_11              : std_logic;
  SIGNAL y_shift4                         : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x_temp4                          : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x_temp_0_4_1                     : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x4                               : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x4_p                             : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x_shift5                         : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y_temp5                          : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y_temp_0_5_1                     : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y5                               : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y5_p                             : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y5_p_msb                         : std_logic;  -- ufix1
  SIGNAL switch_compare_1_12              : std_logic;
  SIGNAL switch_compare_1_13              : std_logic;
  SIGNAL y_shift5                         : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x_temp5                          : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x_temp_0_5_1                     : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x5                               : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x5_p                             : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x_shift6                         : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y_temp6                          : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y_temp_0_6_1                     : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y6                               : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y6_p                             : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y6_p_msb                         : std_logic;  -- ufix1
  SIGNAL switch_compare_1_14              : std_logic;
  SIGNAL switch_compare_1_15              : std_logic;
  SIGNAL y_shift6                         : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x_temp6                          : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x_temp_0_6_1                     : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x6                               : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x6_p                             : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x_shift7                         : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y_temp7                          : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y_temp_0_7_1                     : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y7                               : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y7_p                             : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y7_p_msb                         : std_logic;  -- ufix1
  SIGNAL switch_compare_1_16              : std_logic;
  SIGNAL switch_compare_1_17              : std_logic;
  SIGNAL y_shift7                         : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x_temp7                          : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x_temp_0_7_1                     : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x7                               : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x7_p                             : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x_shift8                         : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y_temp8                          : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y_temp_0_8_1                     : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y8                               : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y8_p                             : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y8_p_msb                         : std_logic;  -- ufix1
  SIGNAL switch_compare_1_18              : std_logic;
  SIGNAL switch_compare_1_19              : std_logic;
  SIGNAL y_shift8                         : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x_temp8                          : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x_temp_0_8_1                     : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x8                               : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x8_p                             : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x_shift9                         : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y_temp9                          : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y_temp_0_9_1                     : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y9                               : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y9_p                             : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y9_p_msb                         : std_logic;  -- ufix1
  SIGNAL switch_compare_1_20              : std_logic;
  SIGNAL switch_compare_1_21              : std_logic;
  SIGNAL y_shift9                         : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x_temp9                          : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x_temp_0_9_1                     : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x9                               : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x9_p                             : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL x_shift10                        : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y_temp10                         : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y_temp_0_10_1                    : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y10                              : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y10_p                            : signed(34 DOWNTO 0);  -- sfix35_En16
  SIGNAL y10_p_msb                        : std_logic;  -- ufix1
  SIGNAL switch_compare_1_22              : std_logic;
  SIGNAL switch_compare_1_23              : std_logic;
  SIGNAL switch_compare_1_24              : std_logic;
  SIGNAL switch_compare_1_25              : std_logic;
  SIGNAL switch_compare_1_26              : std_logic;
  SIGNAL switch_compare_1_27              : std_logic;
  SIGNAL switch_compare_1_28              : std_logic;
  SIGNAL switch_compare_1_29              : std_logic;
  SIGNAL switch_compare_1_30              : std_logic;
  SIGNAL switch_compare_1_31              : std_logic;
  SIGNAL switch_compare_1_32              : std_logic;
  SIGNAL z0                               : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL lut_value_s1                     : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL lut_value_temp1                  : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL y_temp_0_1_2                     : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL z1                               : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL z1_p                             : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL lut_value_s2                     : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL lut_value_temp2                  : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL y_temp_0_2_2                     : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL z2                               : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL z2_p                             : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL lut_value_s3                     : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL lut_value_temp3                  : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL y_temp_0_3_2                     : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL z3                               : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL z3_p                             : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL lut_value_s4                     : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL lut_value_temp4                  : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL y_temp_0_4_2                     : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL z4                               : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL z4_p                             : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL lut_value_s5                     : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL lut_value_temp5                  : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL y_temp_0_5_2                     : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL z5                               : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL z5_p                             : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL lut_value_s6                     : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL lut_value_temp6                  : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL y_temp_0_6_2                     : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL z6                               : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL z6_p                             : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL lut_value_s7                     : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL lut_value_temp7                  : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL y_temp_0_7_2                     : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL z7                               : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL z7_p                             : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL lut_value_s8                     : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL lut_value_temp8                  : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL y_temp_0_8_2                     : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL z8                               : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL z8_p                             : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL lut_value_s9                     : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL lut_value_temp9                  : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL y_temp_0_9_2                     : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL z9                               : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL z9_p                             : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL lut_value_s10                    : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL lut_value_temp10                 : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL y_temp_0_10_2                    : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL z10                              : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL z10_p                            : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL lut_value_s11                    : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL lut_value_temp11                 : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL y_temp_0_11                      : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL z11                              : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL z11_p                            : signed(34 DOWNTO 0);  -- sfix35_En30
  SIGNAL z_out                            : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL z_temp3_cast                     : signed(33 DOWNTO 0);  -- sfix34_En30
  SIGNAL z_temp3_cast_1                   : signed(33 DOWNTO 0);  -- sfix34_En30
  SIGNAL z_temp3_1                        : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL z_temp2_1                        : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL z_temp1_1                        : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL z_out_adjust                     : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL angle_tmp                        : signed(32 DOWNTO 0);  -- sfix33_En30

BEGIN
  y_in_signed <= signed(y_in);

  y_in_ext <= resize(y_in_signed, 35);

  y_in_reg_out_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      y_in_reg_out_1 <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        y_in_reg_out_1 <= y_in_ext;
      END IF;
    END IF;
  END PROCESS y_in_reg_out_process;


  y_in_msb <= y_in_reg_out_1(34);

  
  switch_compare_1 <= '1' WHEN y_in_msb > '0' ELSE
      '0';

  
  comp_zero <= '1' WHEN y_in_reg_out_1 > to_signed(0, 35) ELSE
      '0';

  
  y_non_zero <= comp_zero WHEN switch_compare_1 = '0' ELSE
      y_in_msb;

  y_non_zero_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      y_non_zero_reg_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        y_non_zero_reg_reg(0) <= y_non_zero;
        y_non_zero_reg_reg(1 TO 11) <= y_non_zero_reg_reg(0 TO 10);
      END IF;
    END IF;
  END PROCESS y_non_zero_reg_process;

  y_non_zero_p <= y_non_zero_reg_reg(11);

  x_in_signed <= signed(x_in);

  x_in_ext <= resize(x_in_signed, 35);

  x_in_reg_out_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      x_in_reg_out_1 <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        x_in_reg_out_1 <= x_in_ext;
      END IF;
    END IF;
  END PROCESS x_in_reg_out_process;


  x_in_msb <= x_in_reg_out_1(34);

  x_quad_adjust_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      x_quad_adjust_reg_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        x_quad_adjust_reg_reg(0) <= x_in_msb;
        x_quad_adjust_reg_reg(1 TO 11) <= x_quad_adjust_reg_reg(0 TO 10);
      END IF;
    END IF;
  END PROCESS x_quad_adjust_reg_process;

  x_quad_adjust_p <= x_quad_adjust_reg_reg(11);

  y_quad_adjust_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      y_quad_adjust_reg_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        y_quad_adjust_reg_reg(0) <= y_in_msb;
        y_quad_adjust_reg_reg(1 TO 11) <= y_quad_adjust_reg_reg(0 TO 10);
      END IF;
    END IF;
  END PROCESS y_quad_adjust_reg_process;

  y_quad_adjust_p <= y_quad_adjust_reg_reg(11);

  x_y_adjust <= unsigned'(y_non_zero_p & x_quad_adjust_p & y_quad_adjust_p);

  zero <= to_signed(0, 33);

  onePi_1 <= signed'("011001001000011111101101010100010");

  
  switch_compare_1_1 <= '1' WHEN y_in_msb > '0' ELSE
      '0';

  y_in_reg_neg_cast <= resize(y_in_reg_out_1, 36);
  y_in_reg_neg_cast_1 <=  - (y_in_reg_neg_cast);
  y_in_reg_neg_1 <= y_in_reg_neg_cast_1(34 DOWNTO 0);

  
  y_pre_quadcorr_out <= y_in_reg_out_1 WHEN switch_compare_1_1 = '0' ELSE
      y_in_reg_neg_1;

  -- Pipeline registers
  y_pre_quadcorr_out_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      y0_p <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        y0_p <= y_pre_quadcorr_out;
      END IF;
    END IF;
  END PROCESS y_pre_quadcorr_out_reg_process;


  y0_p_msb <= y0_p(34);

  
  switch_compare_1_2 <= '1' WHEN y0_p_msb > '0' ELSE
      '0';

  
  switch_compare_1_3 <= '1' WHEN x_in_msb > '0' ELSE
      '0';

  x_in_reg_neg_cast <= resize(x_in_reg_out_1, 36);
  x_in_reg_neg_cast_1 <=  - (x_in_reg_neg_cast);
  x_in_reg_neg_1 <= x_in_reg_neg_cast_1(34 DOWNTO 0);

  
  x_pre_quadcorr_out <= x_in_reg_out_1 WHEN switch_compare_1_3 = '0' ELSE
      x_in_reg_neg_1;

  -- Pipeline registers
  x_pre_quadcorr_out_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      x0_p <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        x0_p <= x_pre_quadcorr_out;
      END IF;
    END IF;
  END PROCESS x_pre_quadcorr_out_reg_process;


  y_temp1 <= y0_p - x0_p;

  y_temp_0_1_1 <= y0_p + x0_p;

  
  y1 <= y_temp1 WHEN switch_compare_1_2 = '0' ELSE
      y_temp_0_1_1;

  y_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      y1_p <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        y1_p <= y1;
      END IF;
    END IF;
  END PROCESS y_reg_process;


  y1_p_msb <= y1_p(34);

  
  switch_compare_1_4 <= '1' WHEN y1_p_msb > '0' ELSE
      '0';

  
  switch_compare_1_5 <= '1' WHEN y0_p_msb > '0' ELSE
      '0';

  x_temp1 <= x0_p + y0_p;

  x_temp_0_1_1 <= x0_p - y0_p;

  
  x1 <= x_temp1 WHEN switch_compare_1_5 = '0' ELSE
      x_temp_0_1_1;

  -- Pipeline registers
  x_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      x1_p <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        x1_p <= x1;
      END IF;
    END IF;
  END PROCESS x_reg_process;


  x_shift2 <= SHIFT_RIGHT(x1_p, 1);

  y_temp2 <= y1_p - x_shift2;

  y_temp_0_2_1 <= y1_p + x_shift2;

  
  y2 <= y_temp2 WHEN switch_compare_1_4 = '0' ELSE
      y_temp_0_2_1;

  y_reg_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      y2_p <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        y2_p <= y2;
      END IF;
    END IF;
  END PROCESS y_reg_1_process;


  y2_p_msb <= y2_p(34);

  
  switch_compare_1_6 <= '1' WHEN y2_p_msb > '0' ELSE
      '0';

  
  switch_compare_1_7 <= '1' WHEN y1_p_msb > '0' ELSE
      '0';

  y_shift2 <= SHIFT_RIGHT(y1_p, 1);

  x_temp2 <= x1_p + y_shift2;

  x_temp_0_2_1 <= x1_p - y_shift2;

  
  x2 <= x_temp2 WHEN switch_compare_1_7 = '0' ELSE
      x_temp_0_2_1;

  -- Pipeline registers
  x_reg_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      x2_p <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        x2_p <= x2;
      END IF;
    END IF;
  END PROCESS x_reg_1_process;


  x_shift3 <= SHIFT_RIGHT(x2_p, 2);

  y_temp3 <= y2_p - x_shift3;

  y_temp_0_3_1 <= y2_p + x_shift3;

  
  y3 <= y_temp3 WHEN switch_compare_1_6 = '0' ELSE
      y_temp_0_3_1;

  y_reg_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      y3_p <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        y3_p <= y3;
      END IF;
    END IF;
  END PROCESS y_reg_2_process;


  y3_p_msb <= y3_p(34);

  
  switch_compare_1_8 <= '1' WHEN y3_p_msb > '0' ELSE
      '0';

  
  switch_compare_1_9 <= '1' WHEN y2_p_msb > '0' ELSE
      '0';

  y_shift3 <= SHIFT_RIGHT(y2_p, 2);

  x_temp3 <= x2_p + y_shift3;

  x_temp_0_3_1 <= x2_p - y_shift3;

  
  x3 <= x_temp3 WHEN switch_compare_1_9 = '0' ELSE
      x_temp_0_3_1;

  -- Pipeline registers
  x_reg_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      x3_p <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        x3_p <= x3;
      END IF;
    END IF;
  END PROCESS x_reg_2_process;


  x_shift4 <= SHIFT_RIGHT(x3_p, 3);

  y_temp4 <= y3_p - x_shift4;

  y_temp_0_4_1 <= y3_p + x_shift4;

  
  y4 <= y_temp4 WHEN switch_compare_1_8 = '0' ELSE
      y_temp_0_4_1;

  y_reg_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      y4_p <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        y4_p <= y4;
      END IF;
    END IF;
  END PROCESS y_reg_3_process;


  y4_p_msb <= y4_p(34);

  
  switch_compare_1_10 <= '1' WHEN y4_p_msb > '0' ELSE
      '0';

  
  switch_compare_1_11 <= '1' WHEN y3_p_msb > '0' ELSE
      '0';

  y_shift4 <= SHIFT_RIGHT(y3_p, 3);

  x_temp4 <= x3_p + y_shift4;

  x_temp_0_4_1 <= x3_p - y_shift4;

  
  x4 <= x_temp4 WHEN switch_compare_1_11 = '0' ELSE
      x_temp_0_4_1;

  -- Pipeline registers
  x_reg_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      x4_p <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        x4_p <= x4;
      END IF;
    END IF;
  END PROCESS x_reg_3_process;


  x_shift5 <= SHIFT_RIGHT(x4_p, 4);

  y_temp5 <= y4_p - x_shift5;

  y_temp_0_5_1 <= y4_p + x_shift5;

  
  y5 <= y_temp5 WHEN switch_compare_1_10 = '0' ELSE
      y_temp_0_5_1;

  y_reg_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      y5_p <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        y5_p <= y5;
      END IF;
    END IF;
  END PROCESS y_reg_4_process;


  y5_p_msb <= y5_p(34);

  
  switch_compare_1_12 <= '1' WHEN y5_p_msb > '0' ELSE
      '0';

  
  switch_compare_1_13 <= '1' WHEN y4_p_msb > '0' ELSE
      '0';

  y_shift5 <= SHIFT_RIGHT(y4_p, 4);

  x_temp5 <= x4_p + y_shift5;

  x_temp_0_5_1 <= x4_p - y_shift5;

  
  x5 <= x_temp5 WHEN switch_compare_1_13 = '0' ELSE
      x_temp_0_5_1;

  -- Pipeline registers
  x_reg_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      x5_p <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        x5_p <= x5;
      END IF;
    END IF;
  END PROCESS x_reg_4_process;


  x_shift6 <= SHIFT_RIGHT(x5_p, 5);

  y_temp6 <= y5_p - x_shift6;

  y_temp_0_6_1 <= y5_p + x_shift6;

  
  y6 <= y_temp6 WHEN switch_compare_1_12 = '0' ELSE
      y_temp_0_6_1;

  y_reg_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      y6_p <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        y6_p <= y6;
      END IF;
    END IF;
  END PROCESS y_reg_5_process;


  y6_p_msb <= y6_p(34);

  
  switch_compare_1_14 <= '1' WHEN y6_p_msb > '0' ELSE
      '0';

  
  switch_compare_1_15 <= '1' WHEN y5_p_msb > '0' ELSE
      '0';

  y_shift6 <= SHIFT_RIGHT(y5_p, 5);

  x_temp6 <= x5_p + y_shift6;

  x_temp_0_6_1 <= x5_p - y_shift6;

  
  x6 <= x_temp6 WHEN switch_compare_1_15 = '0' ELSE
      x_temp_0_6_1;

  -- Pipeline registers
  x_reg_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      x6_p <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        x6_p <= x6;
      END IF;
    END IF;
  END PROCESS x_reg_5_process;


  x_shift7 <= SHIFT_RIGHT(x6_p, 6);

  y_temp7 <= y6_p - x_shift7;

  y_temp_0_7_1 <= y6_p + x_shift7;

  
  y7 <= y_temp7 WHEN switch_compare_1_14 = '0' ELSE
      y_temp_0_7_1;

  y_reg_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      y7_p <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        y7_p <= y7;
      END IF;
    END IF;
  END PROCESS y_reg_6_process;


  y7_p_msb <= y7_p(34);

  
  switch_compare_1_16 <= '1' WHEN y7_p_msb > '0' ELSE
      '0';

  
  switch_compare_1_17 <= '1' WHEN y6_p_msb > '0' ELSE
      '0';

  y_shift7 <= SHIFT_RIGHT(y6_p, 6);

  x_temp7 <= x6_p + y_shift7;

  x_temp_0_7_1 <= x6_p - y_shift7;

  
  x7 <= x_temp7 WHEN switch_compare_1_17 = '0' ELSE
      x_temp_0_7_1;

  -- Pipeline registers
  x_reg_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      x7_p <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        x7_p <= x7;
      END IF;
    END IF;
  END PROCESS x_reg_6_process;


  x_shift8 <= SHIFT_RIGHT(x7_p, 7);

  y_temp8 <= y7_p - x_shift8;

  y_temp_0_8_1 <= y7_p + x_shift8;

  
  y8 <= y_temp8 WHEN switch_compare_1_16 = '0' ELSE
      y_temp_0_8_1;

  y_reg_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      y8_p <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        y8_p <= y8;
      END IF;
    END IF;
  END PROCESS y_reg_7_process;


  y8_p_msb <= y8_p(34);

  
  switch_compare_1_18 <= '1' WHEN y8_p_msb > '0' ELSE
      '0';

  
  switch_compare_1_19 <= '1' WHEN y7_p_msb > '0' ELSE
      '0';

  y_shift8 <= SHIFT_RIGHT(y7_p, 7);

  x_temp8 <= x7_p + y_shift8;

  x_temp_0_8_1 <= x7_p - y_shift8;

  
  x8 <= x_temp8 WHEN switch_compare_1_19 = '0' ELSE
      x_temp_0_8_1;

  -- Pipeline registers
  x_reg_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      x8_p <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        x8_p <= x8;
      END IF;
    END IF;
  END PROCESS x_reg_7_process;


  x_shift9 <= SHIFT_RIGHT(x8_p, 8);

  y_temp9 <= y8_p - x_shift9;

  y_temp_0_9_1 <= y8_p + x_shift9;

  
  y9 <= y_temp9 WHEN switch_compare_1_18 = '0' ELSE
      y_temp_0_9_1;

  y_reg_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      y9_p <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        y9_p <= y9;
      END IF;
    END IF;
  END PROCESS y_reg_8_process;


  y9_p_msb <= y9_p(34);

  
  switch_compare_1_20 <= '1' WHEN y9_p_msb > '0' ELSE
      '0';

  
  switch_compare_1_21 <= '1' WHEN y8_p_msb > '0' ELSE
      '0';

  y_shift9 <= SHIFT_RIGHT(y8_p, 8);

  x_temp9 <= x8_p + y_shift9;

  x_temp_0_9_1 <= x8_p - y_shift9;

  
  x9 <= x_temp9 WHEN switch_compare_1_21 = '0' ELSE
      x_temp_0_9_1;

  -- Pipeline registers
  x_reg_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      x9_p <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        x9_p <= x9;
      END IF;
    END IF;
  END PROCESS x_reg_8_process;


  x_shift10 <= SHIFT_RIGHT(x9_p, 9);

  y_temp10 <= y9_p - x_shift10;

  y_temp_0_10_1 <= y9_p + x_shift10;

  
  y10 <= y_temp10 WHEN switch_compare_1_20 = '0' ELSE
      y_temp_0_10_1;

  y_reg_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      y10_p <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        y10_p <= y10;
      END IF;
    END IF;
  END PROCESS y_reg_9_process;


  y10_p_msb <= y10_p(34);

  
  switch_compare_1_22 <= '1' WHEN y10_p_msb > '0' ELSE
      '0';

  
  switch_compare_1_23 <= '1' WHEN y9_p_msb > '0' ELSE
      '0';

  
  switch_compare_1_24 <= '1' WHEN y8_p_msb > '0' ELSE
      '0';

  
  switch_compare_1_25 <= '1' WHEN y7_p_msb > '0' ELSE
      '0';

  
  switch_compare_1_26 <= '1' WHEN y6_p_msb > '0' ELSE
      '0';

  
  switch_compare_1_27 <= '1' WHEN y5_p_msb > '0' ELSE
      '0';

  
  switch_compare_1_28 <= '1' WHEN y4_p_msb > '0' ELSE
      '0';

  
  switch_compare_1_29 <= '1' WHEN y3_p_msb > '0' ELSE
      '0';

  
  switch_compare_1_30 <= '1' WHEN y2_p_msb > '0' ELSE
      '0';

  
  switch_compare_1_31 <= '1' WHEN y1_p_msb > '0' ELSE
      '0';

  
  switch_compare_1_32 <= '1' WHEN y0_p_msb > '0' ELSE
      '0';

  z0 <= to_signed(0, 35);

  lut_value_s1 <= to_signed(843314857, 35);

  lut_value_temp1 <= z0 + lut_value_s1;

  y_temp_0_1_2 <= z0 - lut_value_s1;

  
  z1 <= lut_value_temp1 WHEN switch_compare_1_32 = '0' ELSE
      y_temp_0_1_2;

  z_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      z1_p <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        z1_p <= z1;
      END IF;
    END IF;
  END PROCESS z_reg_process;


  lut_value_s2 <= to_signed(497837829, 35);

  lut_value_temp2 <= z1_p + lut_value_s2;

  y_temp_0_2_2 <= z1_p - lut_value_s2;

  
  z2 <= lut_value_temp2 WHEN switch_compare_1_31 = '0' ELSE
      y_temp_0_2_2;

  z_reg_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      z2_p <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        z2_p <= z2;
      END IF;
    END IF;
  END PROCESS z_reg_1_process;


  lut_value_s3 <= to_signed(263043837, 35);

  lut_value_temp3 <= z2_p + lut_value_s3;

  y_temp_0_3_2 <= z2_p - lut_value_s3;

  
  z3 <= lut_value_temp3 WHEN switch_compare_1_30 = '0' ELSE
      y_temp_0_3_2;

  z_reg_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      z3_p <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        z3_p <= z3;
      END IF;
    END IF;
  END PROCESS z_reg_2_process;


  lut_value_s4 <= to_signed(133525159, 35);

  lut_value_temp4 <= z3_p + lut_value_s4;

  y_temp_0_4_2 <= z3_p - lut_value_s4;

  
  z4 <= lut_value_temp4 WHEN switch_compare_1_29 = '0' ELSE
      y_temp_0_4_2;

  z_reg_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      z4_p <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        z4_p <= z4;
      END IF;
    END IF;
  END PROCESS z_reg_3_process;


  lut_value_s5 <= to_signed(67021687, 35);

  lut_value_temp5 <= z4_p + lut_value_s5;

  y_temp_0_5_2 <= z4_p - lut_value_s5;

  
  z5 <= lut_value_temp5 WHEN switch_compare_1_28 = '0' ELSE
      y_temp_0_5_2;

  z_reg_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      z5_p <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        z5_p <= z5;
      END IF;
    END IF;
  END PROCESS z_reg_4_process;


  lut_value_s6 <= to_signed(33543516, 35);

  lut_value_temp6 <= z5_p + lut_value_s6;

  y_temp_0_6_2 <= z5_p - lut_value_s6;

  
  z6 <= lut_value_temp6 WHEN switch_compare_1_27 = '0' ELSE
      y_temp_0_6_2;

  z_reg_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      z6_p <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        z6_p <= z6;
      END IF;
    END IF;
  END PROCESS z_reg_5_process;


  lut_value_s7 <= to_signed(16775851, 35);

  lut_value_temp7 <= z6_p + lut_value_s7;

  y_temp_0_7_2 <= z6_p - lut_value_s7;

  
  z7 <= lut_value_temp7 WHEN switch_compare_1_26 = '0' ELSE
      y_temp_0_7_2;

  z_reg_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      z7_p <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        z7_p <= z7;
      END IF;
    END IF;
  END PROCESS z_reg_6_process;


  lut_value_s8 <= to_signed(8388437, 35);

  lut_value_temp8 <= z7_p + lut_value_s8;

  y_temp_0_8_2 <= z7_p - lut_value_s8;

  
  z8 <= lut_value_temp8 WHEN switch_compare_1_25 = '0' ELSE
      y_temp_0_8_2;

  z_reg_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      z8_p <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        z8_p <= z8;
      END IF;
    END IF;
  END PROCESS z_reg_7_process;


  lut_value_s9 <= to_signed(4194283, 35);

  lut_value_temp9 <= z8_p + lut_value_s9;

  y_temp_0_9_2 <= z8_p - lut_value_s9;

  
  z9 <= lut_value_temp9 WHEN switch_compare_1_24 = '0' ELSE
      y_temp_0_9_2;

  z_reg_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      z9_p <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        z9_p <= z9;
      END IF;
    END IF;
  END PROCESS z_reg_8_process;


  lut_value_s10 <= to_signed(2097149, 35);

  lut_value_temp10 <= z9_p + lut_value_s10;

  y_temp_0_10_2 <= z9_p - lut_value_s10;

  
  z10 <= lut_value_temp10 WHEN switch_compare_1_23 = '0' ELSE
      y_temp_0_10_2;

  z_reg_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      z10_p <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        z10_p <= z10;
      END IF;
    END IF;
  END PROCESS z_reg_9_process;


  lut_value_s11 <= to_signed(1048576, 35);

  lut_value_temp11 <= z10_p + lut_value_s11;

  y_temp_0_11 <= z10_p - lut_value_s11;

  
  z11 <= lut_value_temp11 WHEN switch_compare_1_22 = '0' ELSE
      y_temp_0_11;

  z_reg_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      z11_p <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        z11_p <= z11;
      END IF;
    END IF;
  END PROCESS z_reg_10_process;


  z_out <= z11_p(32 DOWNTO 0);

  z_temp3_cast <= resize(z_out, 34);
  z_temp3_cast_1 <=  - (z_temp3_cast);
  z_temp3_1 <= z_temp3_cast_1(32 DOWNTO 0);

  z_temp2_1 <= onePi_1 - z_out;

  z_temp1_1 <= z_out - onePi_1;

  Z_Multiport_Switch_output : PROCESS (onePi_1, x_y_adjust, z_out, z_temp1_1, z_temp2_1, z_temp3_1, zero)
  BEGIN
    CASE x_y_adjust IS
      WHEN "000" =>
        z_out_adjust <= zero;
      WHEN "001" =>
        z_out_adjust <= zero;
      WHEN "010" =>
        z_out_adjust <= onePi_1;
      WHEN "011" =>
        z_out_adjust <= onePi_1;
      WHEN "100" =>
        z_out_adjust <= z_out;
      WHEN "101" =>
        z_out_adjust <= z_temp3_1;
      WHEN "110" =>
        z_out_adjust <= z_temp2_1;
      WHEN OTHERS => 
        z_out_adjust <= z_temp1_1;
    END CASE;
  END PROCESS Z_Multiport_Switch_output;


  -- Pipeline register for output z
  z_out_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      angle_tmp <= to_signed(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        angle_tmp <= z_out_adjust;
      END IF;
    END IF;
  END PROCESS z_out_reg_process;


  angle <= std_logic_vector(angle_tmp);

END rtl;

